<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://fabricmc.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://fabricmc.net/" rel="alternate" type="text/html" /><updated>2024-05-31T15:36:01+00:00</updated><id>https://fabricmc.net/feed.xml</id><title type="html">Fabric</title><subtitle>The home of the Fabric mod development toolchain.</subtitle><entry><title type="html">Fabric for Minecraft 1.20.5 &amp;amp; 1.20.6</title><link href="https://fabricmc.net/2024/04/19/1205.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.20.5 &amp;amp; 1.20.6" /><published>2024-04-19T00:00:00+00:00</published><updated>2024-04-19T00:00:00+00:00</updated><id>https://fabricmc.net/2024/04/19/1205</id><content type="html" xml:base="https://fabricmc.net/2024/04/19/1205.html">&lt;p&gt;Minecraft 1.20.5 is to be released in the near future with significant changes affecting mod makers.&lt;/p&gt;

&lt;p&gt;But first, we need to make this clear: &lt;strong&gt;1.20.5 is a record-breaking update.&lt;/strong&gt; This development cycle spans from December 18, 2023 to April of 2024, the longest for any “dot release”. We saw 15 snapshots, the first time it became two digits for a dot release (previous record was 1.20.3 for 8 snapshots). And no surprise: the amount of changes is also unprecedented.&lt;/p&gt;

&lt;p&gt;For this reason, &lt;strong&gt;we ask all players to be patient, and give mod developers time to update to this new version.&lt;/strong&gt; We ask everyone kindly not to pester them. 1.20.5 is expected to be the last update of the 1.20 series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We recommend all players to make a backup of the world.&lt;/strong&gt; For content mod users, creating a new world is recommended, as most mods do not handle world data upgrades of this magnitude.&lt;/p&gt;

&lt;p&gt;Here is a list of all major modder-facing changes in this version. Note that all code references are using Yarn mappings; modders using alternative mappings may need to use different names.&lt;/p&gt;

&lt;h2 id=&quot;java-21&quot;&gt;Java 21&lt;/h2&gt;
&lt;p&gt;Minecraft 1.20.5 now requires Java 21 to run. This means mods can be compiled for Java 21 and use the latest features. This also marks the end of 32-bit support.&lt;/p&gt;

&lt;p&gt;To set up a development environment you will need to use Java 21, Loom 1.6, and Gradle 8.6 or higher.&lt;/p&gt;

&lt;h2 id=&quot;fabric-changes&quot;&gt;Fabric changes&lt;/h2&gt;
&lt;p&gt;Developers should use Loom 1.6 (at the time of writing) to develop mods for Minecraft 1.20.5. Players should install the latest stable version of Fabric Loader (currently 0.15.10).&lt;/p&gt;

&lt;h3 id=&quot;loom-15--16&quot;&gt;Loom 1.5 &amp;amp; 1.6&lt;/h3&gt;
&lt;p&gt;There has been two major updates to Loom since the last blogpost: 1.5 and 1.6.&lt;/p&gt;

&lt;p&gt;Loom 1.5 includes several performance boosts and small bug fixes. Notably, the mixins can now be remapped using the Tiny Remapper instead of Mixin annotation processor. When enabled, the mixins are remapped in-place and the output jar no longer contains a refmap. This is currently experimental and opt-in.&lt;/p&gt;

&lt;p&gt;Loom 1.6 also brought more performance improvements. Decompiler caches were added, meaning that changes to access wideners no longer cause the entire game to be decompiled. There is also an update to how Loom handles existing locks (such as when two Gradle runs occur simultaneously) - it will no longer clear the cache, instead waiting for one process to exit. The error message for locked files is now more detailed, as well.&lt;/p&gt;

&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/FabricMC/fabric-loom/releases/tag/1.5&quot;&gt;Loom 1.5&lt;/a&gt; and &lt;a href=&quot;https://github.com/FabricMC/fabric-loom/releases/tag/1.6&quot;&gt;Loom 1.6&lt;/a&gt; release notes for all of the changes.&lt;/p&gt;

&lt;h3 id=&quot;localization&quot;&gt;Localization&lt;/h3&gt;
&lt;p&gt;Fabric has recently moved to using Crowdin to help manage translations for our projects. This makes it much easier to contribute translations across all Fabric projects.&lt;/p&gt;

&lt;p&gt;Current projects include Fabric API and installer. &lt;!-- Docs are WIP --&gt; If you are able to help translate Fabric into your language, please visit &lt;a href=&quot;https://crowdin.com/project/fabricmc&quot;&gt;the Crowdin website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-fabric-api-changes&quot;&gt;New Fabric API changes&lt;/h3&gt;
&lt;p&gt;With the help of many contributors, Fabric API has received some new features since the last update blog post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New API: Data Attachments. This allows attaching custom data to block entities, chunks, entites, and worlds. Attached data can be saved or persisted between mob conversions. (Syst3ms)&lt;/li&gt;
  &lt;li&gt;Interaction Events: add client after block break event (kevinthegreat1)&lt;/li&gt;
  &lt;li&gt;GameTest API: add a system property for a custom output directory for gametest structures (ErrorCraft)&lt;/li&gt;
  &lt;li&gt;Entity Events: add mob conversion event (Syst3ms)&lt;/li&gt;
  &lt;li&gt;Fabric Rendering: add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AtlasSourceTypeRegistry&lt;/code&gt; (PepperCode1)&lt;/li&gt;
  &lt;li&gt;Data Generation: add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricCodecDataProvider&lt;/code&gt; (ErrorCraft)&lt;/li&gt;
  &lt;li&gt;Resource Loader: significant refactors to support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pack.mcmeta&lt;/code&gt; metadata like filters and overlays. (apple502j)&lt;/li&gt;
  &lt;li&gt;Fabric Rendering: add support for custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorResolver&lt;/code&gt;s (PepperCode1)&lt;/li&gt;
  &lt;li&gt;Fluids Rendering: expose a function for querying the non-default fluid renderer (jellysquid3)&lt;/li&gt;
  &lt;li&gt;Lifecycle Events: add save events to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerLifecycleEvents&lt;/code&gt; (MrNavaStar)&lt;/li&gt;
  &lt;li&gt;Item API: add enchantments API (Syst3ms)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is one more addition for advanced developers: you can now declare Fabric API as a dependency using BOM or version catalogs. Check &lt;a href=&quot;https://github.com/FabricMC/fabric/pull/3487&quot;&gt;the pull request&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&quot;breaking-changes-and-deprecations&quot;&gt;Breaking changes and deprecations&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Note: breaking changes related to vanilla changes are discussed below.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following APIs were removed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-containers-v0&lt;/code&gt; (previously deprecated)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-events-lifecycle-v0&lt;/code&gt; (previously deprecated)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-mining-level-api-v1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenRegistry&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenHandlerRegistry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ModifyItemAttributeModifiersCallback&lt;/code&gt; from the Item API was removed without replacement due to code changes making it infeasible to port.&lt;/p&gt;

&lt;p&gt;In Object Builder API, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricItemSettings&lt;/code&gt; was removed. Use vanilla &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item.Settings&lt;/code&gt; instead; interface injection provides settings added by Fabric API. Similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricBlockSettings&lt;/code&gt; was deprecated and replaced with vanilla &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractBlock.Settings&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricEntityTypeBuilder&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricBlockEntityTypeBuilder&lt;/code&gt; were also deprecated; use vanilla builders instead.&lt;/p&gt;

&lt;h3 id=&quot;codec-based-resource-conditions&quot;&gt;Codec-based Resource Conditions&lt;/h3&gt;
&lt;p&gt;Unrelated to the 1.20.5 update, a significant change was made to Resource Conditions’ internal workings. This update was developed by Apollo and apple502j. The only breaking change to the JSON syntax is the removal of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(block/item/fluid)_tags_populated&lt;/code&gt; conditions, but data generation is heavily affected.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionJsonProvider&lt;/code&gt; interface has been removed and been replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceCondition&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceCondition&lt;/code&gt; has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; method, for determining whether the condition should pass, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getType&lt;/code&gt;, which returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceConditionType&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withConditions&lt;/code&gt; methods in data providers now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceCondition&lt;/code&gt; instances. Methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultResourceConditions&lt;/code&gt; that created conditions have been moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceConditions&lt;/code&gt;. A custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceConditionType&lt;/code&gt; should be registered with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceConditions#register&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric:true&lt;/code&gt; condition was added. This condition always passes.&lt;/p&gt;

&lt;h3 id=&quot;convention-tag-unification&quot;&gt;Convention Tag unification&lt;/h3&gt;
&lt;p&gt;Another significant change was made in the Convention Tags. As part of collaborative efforts with NeoForge, TelepathicGrunt has prepared (and we released) the version 2 of the tags. Version 1 is now deprecated.&lt;/p&gt;

&lt;p&gt;As the changes are too long to list here, developers are encouraged to check the &lt;a href=&quot;https://github.com/FabricMC/fabric/pull/3310&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;minecraft-changes&quot;&gt;Minecraft changes&lt;/h2&gt;
&lt;p&gt;In short, these are the veeery major changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item Components. Item stacks no longer use NBT as runtime data storage, instead using predefined “components” to keep values like custom name, enchantments, or damage.&lt;/li&gt;
  &lt;li&gt;Networking. Instead of manually processing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;, packets are now serialized using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt;s. In Fabric Networking API, the previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;-based APIs were removed; the newer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricPacket&lt;/code&gt;-based API was rewritten to make use of the vanilla &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomPayload&lt;/code&gt; interface.&lt;/li&gt;
  &lt;li&gt;Registries. Likely as a preparation for data-driven blocks and items, serialization/deserialization of most objects now require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryWrapper.WrapperLookup&lt;/code&gt; instance. This is most noticeable in texts and data generation. In addition, loot tables are now managed by a new type of registry called “reloadable registries”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;item-components&quot;&gt;Item Components&lt;/h3&gt;
&lt;p&gt;We skip the general description of the item components system, which you can check in the slicedlime’s video: &lt;a href=&quot;https://www.youtube.com/watch?v=iY9OHAd4Aco&quot;&gt;News in Data Pack Version 33 (24w09a): Item Components!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, we begin the journey into the implementation of item components:&lt;/p&gt;

&lt;p&gt;There are five main objects in the item components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataComponentType&lt;/code&gt;, a type of components, serving as keys;&lt;/li&gt;
  &lt;li&gt;Component classes (can be any object), serving as values;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentMap&lt;/code&gt;, a read-only view of components;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentMapImpl&lt;/code&gt;, which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentMap&lt;/code&gt; that can be modified, and internally a pair of unmodifiable base &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentMap&lt;/code&gt; and the “overrides” that are modified; and&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentChanges&lt;/code&gt;, a map of component type to the changes for the value (either setting it to a specific value or removing it). This can be used as a diff applied to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;; you apply an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentChanges&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentMapImpl&lt;/code&gt;, so that the overrides part of the map reflects the changes. In other parts of the code, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentChanges&lt;/code&gt; is just used as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentMapImpl&lt;/code&gt; minus the base.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, how does this work?&lt;/p&gt;

&lt;p&gt;Each item has the base components. In addition to the base components common to all items, like having empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnchantmentsComponent&lt;/code&gt;, some items provide additional base components. A notable example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataComponentTypes#DAMAGE&lt;/code&gt; for armors, tools, and weapons. A component type that exists in the base has a corresponding default value; here the default damage is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; can either 1) add an additional component not present in the base; 2) change the components from the one in the base; or 3) remove a component that exists in the base. The final components of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;, obtainable as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentMap&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack#getComponents&lt;/code&gt;, reflects all three.&lt;/p&gt;

&lt;h4 id=&quot;using-item-components&quot;&gt;Using Item Components&lt;/h4&gt;

&lt;p&gt;Item components on item stacks have a similar API surface to a map. Here are some common operations that can be done, using the example of an item’s custom name (note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; is directly used as the component value):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Similar to Map#get&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Similar to Map#put&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Returns the previous value, if any&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Lorem ipsum&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Similar to Map#getOrDefault&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Similar to Map#remove&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removedName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Similar to Map#compute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// In this example, we change the color of the item name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// (Note: stack#getName already checks for custom name, so in reality this does not need apply() call.)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formatted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Formatting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Getting/setting the custom data (NBT). This is useful for datapack makers and server-side modders, because custom item components (see below) need to be synced to the clients, while custom data remains an unparsed NBT.&lt;/p&gt;

&lt;p&gt;Unlike the previous example, this uses a component record &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NbtComponent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: &lt;strong&gt;component values are supposed to be immutable&lt;/strong&gt; - even if you can modify it, don’t. Always copy and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;NbtCompound&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;NbtComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NbtComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Setting&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Getting a copy&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;NbtCompound&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyNbt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Using NbtComponent#apply, which copies automatically, to modify the NBT&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Note: you might want to use the static method NbtComponent#set instead,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// which makes this a bit shorter&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NbtComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentNbt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentNbt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Checking if a certain NBT is a subset of the stack NBT&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// (also known as: &quot;non-strict matching&quot;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;NbtCompound&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requiredNbt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NbtComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requiredNbt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// use createPredicate to make Predicate&amp;lt;ItemStack&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentChanges&lt;/code&gt; to mass-modify the components of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// stack is a damageable item.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Repair the item and remove custom name.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Note that the resulting stack has no components because 0 damage is the default from the base components.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComponentChanges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DAMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyChanges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Making an item with base components:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataComponentTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Call #component multiple times for multiple base components.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Note: calling maxDamage automatically adds DAMAGE component.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Making a custom component. Note that like many registered entries, these must be present in both the client and the server.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataComponentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEIRDNESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataComponentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;packetCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VAR_INT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// in the initializer&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Registries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DATA_COMPONENT_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;weirdness&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEIRDNESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;some-caveats&quot;&gt;Some caveats&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Component values should not be modified directly. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Record&lt;/code&gt; or other immutable object is highly recommended. Always copy, modify, then set.&lt;/li&gt;
  &lt;li&gt;Setting an invalid value for a component does not cause an error immediately, but will lead to a crash during save, and possible data corruption. A common example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NONNEGATIVE_INT&lt;/code&gt; being used for an incrementing value; when it overflows and the value is set to negatives, saving it would crash.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;blockentity-interaction-with-components&quot;&gt;BlockEntity interaction with components&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockEntity&lt;/code&gt; stores the components when placing a block item stack with components and when pick-blocking. Components are not currently used to serialize block entities themselves. A block entity that uses components, like custom containers, should override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addComponents&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readComponents&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeFromCopiedStackNbt&lt;/code&gt; methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addComponents&lt;/code&gt; adds the block entity’s stored data to a component builder.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readComponents&lt;/code&gt; reads the block entity data from components.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeFromCopiedStackNbt&lt;/code&gt; removes NBT keys which are now serialized using components when in item stacks. For example, a chest’s held stacks are stored under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Items&lt;/code&gt; key when the block entity itself is serialized, and stored under a component when an item stack for the block entity is serialized. To prevent double serialization, this method removes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Items&lt;/code&gt; from the item stack NBT.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootableContainerBlockEntity&lt;/code&gt; handles component changes themselves, so you do not have to reinvent the wheel if you use them.&lt;/p&gt;

&lt;h3 id=&quot;item-component-related-fabric-api-changes&quot;&gt;Item Component-related Fabric API changes&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allowNbtUpdateAnimations&lt;/code&gt; method of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricItem&lt;/code&gt; was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allowComponentsUpdateAnimations&lt;/code&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricItem.getAttributeModifiers&lt;/code&gt; changes?
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isSuitableFor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFoodComponents&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricItemStack&lt;/code&gt; removed/replaced with vanilla components.&lt;/p&gt;

&lt;h4 id=&quot;recipe-api&quot;&gt;Recipe API&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultCustomIngredients#nbt&lt;/code&gt; and support for NBT ingredients were removed, as the game no longer uses NBT to store item stack-specific data.&lt;/p&gt;

&lt;p&gt;To check for custom name, enchantments, etc that were previously kept inside the NBT but are now recorded in the components (see below for details), use the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;components&lt;/code&gt; ingredient. To check for custom data component (a NBT data not used by the game but can be used by data packs or commands), use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;customData&lt;/code&gt; ingredient.&lt;/p&gt;

&lt;h4 id=&quot;transfer-api&quot;&gt;Transfer API&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransferVariant&lt;/code&gt; (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FluidVariant&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemVariant&lt;/code&gt;) is now a pair of the object and the components, instead of the object and NBT. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getNbt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasNbt&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbtMatches&lt;/code&gt; methods were replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getComponents&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasComponents&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;componentsMatch&lt;/code&gt; methods. The following methods were removed: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copyNbt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copyOrCreateNbt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toNbt&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toPacket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FluidVariant#of&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemVariant#of&lt;/code&gt; now takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentChanges&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Nullable NbtCompound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransferVariant&lt;/code&gt; is now serialized using codecs and packet codecs. Therefore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fromNbt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fromPacket&lt;/code&gt; static methods were removed.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SingleVariantStorage#writeNbt&lt;/code&gt; instance method was removed; subclasses now provide separate methods named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeNbt&lt;/code&gt;. Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readNbt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeNbt&lt;/code&gt; now require passing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryWrapper.WrapperLookup&lt;/code&gt; instance; they should be available in the methods from which they are called (or you can use the world’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryManager&lt;/code&gt; instance).&lt;/p&gt;

&lt;h3 id=&quot;other-item-changes&quot;&gt;Other Item changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;As noted in the video, an empty item stack is now serialized as omitting the field or an empty object. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack#fromNbt&lt;/code&gt; now returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional&amp;lt;ItemStack&amp;gt;&lt;/code&gt; while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fromNbtOrEmpty&lt;/code&gt; supports empty NBT object. Both now require passing the registries. These methods log an error when an item with ID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minecraft:air&lt;/code&gt; is encountered.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeNbt&lt;/code&gt; method was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encode&lt;/code&gt;. The one with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NbtCompound&lt;/code&gt; argument allows adding to the existing compound, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeNbt&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; that reference &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nbt&lt;/code&gt; are generally renamed to reference &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Components&lt;/code&gt; instead.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item#isNbtSynced&lt;/code&gt; was removed, specify custom packet codecs instead.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item#getBreakSound&lt;/code&gt; was added.&lt;/li&gt;
  &lt;li&gt;Attack damage and mining speed of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiningToolItem&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwordItem&lt;/code&gt; are now specified in item settings via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributeModifiers&lt;/code&gt; setting.&lt;/li&gt;
  &lt;li&gt;Item tooltips are now given a “tooltip type”, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TooltipContext&lt;/code&gt; is now under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemTooltipCallback&lt;/code&gt; Fabric API event now passes the type as well. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hide_tooltip&lt;/code&gt; item component prevents the event from being invoked.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;item-damages&quot;&gt;Item damages&lt;/h4&gt;
&lt;p&gt;When damaging an item stack held in the hands or in the armor slots, you now pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EquipmentSlot&lt;/code&gt; instead of a callback:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- stack.damage(1, entity, p -&amp;gt; p.sendToolBreakStatus(Hand.MAIN_HAND));
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ stack.damage(1, entity, EquipmentSlot.MAINHAND);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When damaging an item stack held by non-entities (like shears in dispensers), the stack must be broken by the newly passed callback, not by checking the return value.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- if (stack.damage(1, random, null)) stack.setCount(0);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ stack.damage(1, random, null, () -&amp;gt; stack.setCount(0));
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Fabric API, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomDamageHandler&lt;/code&gt; callback’s signature was changed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack stack, int amount, LivingEntity entity, Consumer breakCallback&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack stack, int amount, LivingEntity entity, EquipmentSlot slot, Runnable breakCallback&lt;/code&gt;. Additionally, calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;breakCallback&lt;/code&gt; now ignores the return value and vanilla damage handler (as the item is already broken).&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;
&lt;p&gt;Previously, networking code was simple: reading from, and writing to, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;. Although this method still works, Mojang has added an abstraction layor: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt; works like the DataFixerUpper codecs used in JSON/NBT serialization - although they are not compatible with each other. To keep it simple, &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt; is a pair of deserializers and serializers&lt;/strong&gt; - or, decoders and encoders. This change reduces bugs related to wrong read/write order - which is one of the most difficult bugs to identify.&lt;/p&gt;

&lt;h4 id=&quot;how-to-create-a-packetcodec&quot;&gt;How to create a PacketCodec&lt;/h4&gt;
&lt;p&gt;Note: A new subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;, &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryByteBuf&lt;/code&gt;, is used for PLAY-phase networking&lt;/strong&gt; (the one you’re probably using). For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigurationNetworking&lt;/code&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryByteBuf&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt;s are usually stored in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public static final&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;Suppose we are serializing this record:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VirtualHugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note: replaced PacketByteBuf with RegistryByteBuf&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VirtualHugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryByteBuf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readVarInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Instance method&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryByteBuf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeVarInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Static method, buffer-first&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryByteBuf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VirtualHugs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeVarInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;The easy method - adopting existing code&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryByteBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VirtualHugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PACKET_CODEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or, using static method:&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PACKET_CODEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofStatic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;The new method - building codecs from other codecs, like in DataFixerUpper&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;tuple&quot; is an ordered, un-keyed set of stuff.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Up to 3 fields can be serialized with vanilla method.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The constructor always comes last.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;CODEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VAR_INT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or, since there is only one field in VirtualHugs, this works too.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;CODEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VAR_INT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;VirtualHugs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;You might see some nasty casting errors in some cases. Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cast()&lt;/code&gt; on the codec to make it go away;&lt;/strong&gt; it’s generally safe to do so.&lt;/p&gt;

&lt;h4 id=&quot;advanced-packetcodecs-examples&quot;&gt;Advanced PacketCodecs examples&lt;/h4&gt;
&lt;p&gt;Here are some more examples:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// For a singleton (like an empty packet). Encoding something other than INSTANCE will error.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// It does not actually touch the buffer.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Using PacketCodec from classic API&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;TextCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Codec for Optional&amp;lt;Text&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Compatible with PacketByteBuf#readOptional&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;PacketCodecs:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Codec for List&amp;lt;String&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or Set&amp;lt;String&amp;gt;, each max 16 chars&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// both work fine, compatible with PacketByteBuf#readCollection&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HashSet:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HashSet:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Map&amp;lt;String, BlockPos&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;HashMap:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlockPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// What? DataFixerUpper codecs?&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Nah, these are just serialized as NBTs.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;advancement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Advancement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Serializing NbtCompound&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NBT_COMPOUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Serializing a registry value (by raw ID)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Note: these require RegistryByteBuf!&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryByteBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registryValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ITEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Or, RegistryEntry&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryByteBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Biome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registryEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Serializing an Enum&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ordinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;fabric-networking-api&quot;&gt;Fabric Networking API&lt;/h4&gt;
&lt;p&gt;Networking API no longer directly uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;, except in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginNetworking&lt;/code&gt;. Instead, you need to subclass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomPayload&lt;/code&gt; and register it. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomPayload&lt;/code&gt; is a vanilla interface. While this is similar to the packet object-based networking introduced recently, it is different in some ways. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketType&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricPacket&lt;/code&gt; were, therefore, removed.)&lt;/p&gt;

&lt;p&gt;Compare the following, pre-snapshot packet:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FabricPacket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SlapPacket:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PacketByteBuf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PacketByteBuf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a new one:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PACKET_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PacketCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryByteBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PACKET_CODEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Uuids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;SlapPacket:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SlapPacket:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are three differences you will notice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of now-removed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricPacket&lt;/code&gt;, we implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomPayload&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomPayload&lt;/code&gt; implementation has its own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomPayload.Id&lt;/code&gt;. Unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketType&lt;/code&gt;, it lacks reference to the decoder.&lt;/li&gt;
  &lt;li&gt;The latter does not have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; method or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;-taking constructor. Instead, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PACKET_CODEC&lt;/code&gt; field was added. (Note, you can make your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt; from the constructor and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; method, so don’t just remove those!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, you may ask, how do you get the decoder if it’s not in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Id&lt;/code&gt;? Good question. The answer: &lt;strong&gt;you need to register it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ModInitializer&lt;/code&gt; on both ends (sender and receiver)&lt;/strong&gt;. In fact, Fabric API will happily crash if you don’t before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registerGlobalReceiver&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// SlapPacket is sent during gameplay&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// from the client to the server (serverbound; C2S)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;PayloadTypeRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;playC2S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Replace with configurationS2C, playS2C, etc.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you can change the receiver. Instead of long parameters, the event callback now gets only 2 parameters: the payload that was sent, and a context object. (Don’t worry, it won’t eat the RAM.)&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- ServerPlayNetworking.registerGlobalReceiver(SlapPacket.TYPE, (packet, player, sender) -&amp;gt; {
-   var world = player.getServerWorld();
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ServerPlayNetworking.registerGlobalReceiver(SlapPacket.PACKET_ID, (payload, context) -&amp;gt; {
+   var world = context.player().getServerWorld();
&lt;/span&gt;    var entity = world.getEntity(packet.slapped());
&lt;span class=&quot;err&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are the available fields in the context object:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PayloadTypeRegistry&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;Class&lt;/th&gt;
      &lt;th&gt;Context Fields&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playC2S&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerPlayNetworking&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;player&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseSender&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playS2C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientPlayNetworking&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;player&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseSender&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configurationC2S&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerConfigurationNetworking&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;networkHandler&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseSender&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configurationS2C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientConfigurationNetworking&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseSender&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that the field shortcuts might be added later.&lt;/p&gt;

&lt;p&gt;Finally, sending the packet also uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomPayload&lt;/code&gt;. &lt;strong&gt;Remember to register the codec first&lt;/strong&gt;!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ClientPlayNetworking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// for PacketSender:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SlapPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketSender&lt;/code&gt; no longer provides APIs that use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;.&lt;/strong&gt; For login networking where custom payloads are not used yet, use the subinterface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginPacketSender&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some other Networking API related changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FutureListeners&lt;/code&gt; was removed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenericFutureListener&lt;/code&gt;-taking methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketSender&lt;/code&gt; were removed. Use the one taking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCallbacks&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerPlayNetworking#getServer&lt;/code&gt; was removed. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handler.player.server&lt;/code&gt; should work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;networking-adjacent-changes-in-fabric-api&quot;&gt;Networking-adjacent changes in Fabric API&lt;/h3&gt;
&lt;h4 id=&quot;particles-api&quot;&gt;Particles API&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricParticleTypes#complex&lt;/code&gt; now requires you to pass both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codec&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt; for serializing the particle type. The string-based parser, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParticleType.Factory&lt;/code&gt;, was removed.&lt;/p&gt;

&lt;h4 id=&quot;recipe-api-1&quot;&gt;Recipe API&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomIngredientSerializer&lt;/code&gt; must now override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getPacketCodec&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; methods were removed. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ingredient#PACKET_CODEC&lt;/code&gt; for representing another ingredient (which Fabric API patches up to also support ours).&lt;/p&gt;

&lt;h4 id=&quot;screen-handler-api&quot;&gt;Screen Handler API&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtendedScreenHandlerType&lt;/code&gt; now uses a payload object instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt;. In the type constructor, you now need to pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketCodec&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExtendedScreenHandlerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OvenScreenHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OVEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExtendedScreenHandlerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syncId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OvenData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PACKET_CODEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that the callback got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf&lt;/code&gt;, as well. Note that the payload object can be of any type, whether it be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identifier&lt;/code&gt; or your custom record. (These don’t have to be registered in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PayloadTypeRegistry&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtendedScreenHandlerFactory#writeScreenOpeningData&lt;/code&gt; was replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getScreenOpeningData&lt;/code&gt;. It takes the player as the sole argument and returns the data class, in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OvenData&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;registries&quot;&gt;Registries&lt;/h3&gt;
&lt;h4 id=&quot;registrywrapper--datagen&quot;&gt;RegistryWrapper &amp;amp; datagen&lt;/h4&gt;
&lt;p&gt;Many methods for serialization now require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryWrapper.WrapperLookup&lt;/code&gt; instance. This is used to query registries, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryManager&lt;/code&gt; instance can be used for this purpose. This change is most prominent in text and data generation-related code. This registry is used to query data-driven values during serialization.&lt;/p&gt;

&lt;p&gt;Data provider constructors in Fabric API now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryWrapper.WrapperLookup&lt;/code&gt; as a parameter; modders should change their constructors to take the instance and pass to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt; constructor. In addition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricAdvancementProvider#generateAdvancement&lt;/code&gt; now also passes the instance.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;public class TestBlockLootTableProvider extends FabricBlockLootTableProvider {
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-    private TestBlockLootTableProvider(FabricDataOutput output) {
-        super(output);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    private TestBlockLootTableProvider(FabricDataOutput output, CompletableFuture&amp;lt;RegistryWrapper.WrapperLookup&amp;gt; registryLookup) {
+        super(output, registryLookup);
&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;loot-registries&quot;&gt;Loot Registries&lt;/h4&gt;
&lt;p&gt;Loot tables (including loot-adjacent stuff, namely predicates and item modifiers) are now managed by a special type of registry, called “reloadable registries”. Unlike ordinary registries, they are reloaded during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/reload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootDataLookup&lt;/code&gt; was removed; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReloadableRegistries.Lookup&lt;/code&gt; can be obtained from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.getReloadableRegistries()&lt;/code&gt;. From there, item modifiers and predicates can be looked up via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRegistryManager&lt;/code&gt;; a shortcut exists for loot tables via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getLootTable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Registry-ification of loot table also means that they are now identified with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey.of(RegistryKeys.LOOT_TABLE, id)&lt;/code&gt; to get the registry key. In Fabric API, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VillagerInteractionRegistries#registerGiftLootTable&lt;/code&gt; now takes the registry key, while the ID-taking method is deprecated.&lt;/p&gt;

&lt;p&gt;Fabric API’s Loot API received breaking changes. For the arguments passed to events, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceMaanger&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootManager&lt;/code&gt; is gone. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD_ALL&lt;/code&gt; event, the loot manager was replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&amp;lt;LootTable&amp;gt;&lt;/code&gt;. In all places, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identifier&lt;/code&gt; is replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey&lt;/code&gt; as described above. In addition, because mutating registry is impossible now, the loot tables are modified before addition; this means that per-table events don’t get the table registry anymore.&lt;/p&gt;

&lt;h4 id=&quot;other-changes&quot;&gt;Other changes&lt;/h4&gt;
&lt;p&gt;A new syncing protocol is in place for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryManager&lt;/code&gt; entries. Vanilla data packs provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knownPackInfo&lt;/code&gt; fields, which are sent by the server on joined clients. Clients then reply with the subset of the info they understand (i.e. loaded on their side). When a registry entry is loaded from a pack with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knownPackInfo&lt;/code&gt;, and the client has acknowledged the info for the pack, the server tells the client to refer to its own copy of the data, skipping sending the serialized entry over the network. Most importantly, &lt;strong&gt;this is currently not used by mod-provided packs&lt;/strong&gt;, so the registry entries from mods will be sent even if the client has the same mod.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SimpleRegistry&lt;/code&gt; no longer supports changing the registered value post-registration (such as by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt; method). For this reason, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntryRemovedCallback&lt;/code&gt; event and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registeyEntryRemoved&lt;/code&gt; shortcut in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryView&lt;/code&gt; were removed.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SculkSensorFrequencyRegistry.register&lt;/code&gt; now takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey&amp;lt;GameEvent&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameEvent&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;blocks&quot;&gt;Blocks&lt;/h3&gt;
&lt;p&gt;All &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractBlock&lt;/code&gt; public methods to be overridden were made &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; and no longer marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Deprecated&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity entity, BlockHitResult hit) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ protected ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity entity, BlockHitResult hit) {
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enchantments&quot;&gt;Enchantments&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enchantment&lt;/code&gt; constructor now takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enchantment.Properties&lt;/code&gt;, a record of enchantment properties. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnchantmentTarget&lt;/code&gt; enum was replaced with tags that specifies enchantment-supporting items.&lt;/p&gt;

&lt;h3 id=&quot;brewing&quot;&gt;Brewing&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricBrewingRecipeRegistry&lt;/code&gt; was replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricBrewingRecipeRegistryBuilder&lt;/code&gt;. The new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricBrewingRecipeRegistryBuilder.BUILD&lt;/code&gt; event can be used to add new recipes to the brewing stand.&lt;/p&gt;

&lt;h3 id=&quot;entities&quot;&gt;Entities&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpawnRestriction.Location&lt;/code&gt; enum was replaced with an interface, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpawnLocation&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpawnLocationTypes&lt;/code&gt; provides predefined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpawnLocation&lt;/code&gt;s.&lt;/p&gt;

&lt;h3 id=&quot;client&quot;&gt;Client&lt;/h3&gt;
&lt;p&gt;In GUI, setting the initial focus of a screen is now done by overriding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInitialFocus&lt;/code&gt;, rather than calling it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatrixStack&lt;/code&gt; was replaced with the actual matrix in several rendering code.&lt;/p&gt;

&lt;h4 id=&quot;rendering&quot;&gt;Rendering&lt;/h4&gt;
&lt;p&gt;Some places that previously take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rgb&lt;/code&gt; was updated to take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argb&lt;/code&gt; instead. The new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyedColorComponent&lt;/code&gt; takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argb&lt;/code&gt;. Item color providers also take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argb&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rgb&lt;/code&gt;, so make sure to wrap your color with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorHelper.Argb.fullAlpha()&lt;/code&gt; or else your item may appear transparent if it is registered to the translucent render layer. Block color providers also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argb&lt;/code&gt; now, but passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rgb&lt;/code&gt; still works.&lt;/p&gt;

&lt;h3 id=&quot;other&quot;&gt;Other&lt;/h3&gt;
&lt;p&gt;DataFixerUpper was updated. This includes several breaking changes, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MapCodec&lt;/code&gt; being used in places defining extra fields. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecordCodecBuilder#mapCodec&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt; in this case. Another significant change: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optionalFieldOf&lt;/code&gt; is now strict by default. This means that a decoding error in the field value is now treated as an error, instead of being silently skipped. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lenientOptionalFieldOf&lt;/code&gt; method restores old behavior.&lt;/p&gt;

&lt;p&gt;On the Minecraft game code side, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Util#getResult&lt;/code&gt; was replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode(...).getOrThrow()&lt;/code&gt; method. Several methods and fields in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codecs&lt;/code&gt; were moved to the DFU itself, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;either&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xor&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withAlternative&lt;/code&gt; (formerly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codecs#alternatively&lt;/code&gt;).&lt;/p&gt;</content><author><name></name></author><summary type="html">Minecraft 1.20.5 is to be released in the near future with significant changes affecting mod makers.</summary></entry><entry><title type="html">Fabric for Minecraft 1.20.3 &amp;amp; 1.20.4</title><link href="https://fabricmc.net/2023/11/30/1203.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.20.3 &amp;amp; 1.20.4" /><published>2023-11-30T00:00:00+00:00</published><updated>2023-11-30T00:00:00+00:00</updated><id>https://fabricmc.net/2023/11/30/1203</id><content type="html" xml:base="https://fabricmc.net/2023/11/30/1203.html">&lt;p&gt;It’s only been two months since we published the last article on Minecraft updates, but here we are. Minecraft 1.20.3 is to be released in the near future with some changes affecting mod makers.&lt;/p&gt;

&lt;p&gt;As usual, we ask players to be patient, and give mod developers time to update to this new version. Given the rather short interval between updates, some authors may choose to have a rest and skip some versions; we ask everyone kindly not to pester them.&lt;/p&gt;

&lt;p&gt;Here is a list of all major modder-facing changes in this version. Note that all code references are using Yarn mappings; modders using alternative mappings may need to use different names.&lt;/p&gt;

&lt;h2 id=&quot;fabric-changes&quot;&gt;Fabric changes&lt;/h2&gt;
&lt;p&gt;Fabric is about to celebrate its 5th birthday on December 10th! As we approach this milestone, we’re thrilled to share that our team is actively working on introducing exciting new features and enhancements. The following sections outline some of these advancements.&lt;/p&gt;

&lt;p&gt;Developers should use Loom 1.4 (at the time of writing) to develop mods for Minecraft 1.20.3. Players should install the latest stable version of Fabric Loader (currently 0.14.25), or the 0.15 beta if feeling adventurous (see below).&lt;/p&gt;

&lt;h3 id=&quot;loader-015&quot;&gt;Loader 0.15&lt;/h3&gt;
&lt;p&gt;Fabric Loader 0.15 has been released recently, which features built-in support for LlamaLad7’s &lt;a href=&quot;https://github.com/LlamaLad7/MixinExtras&quot;&gt;MixinExtras&lt;/a&gt; library. This version is currently in beta. Should you discover compatibility issues with mods that already bundle MixinExtras, please &lt;a href=&quot;https://github.com/FabricMC/fabric-loader/issues&quot;&gt;file a bug report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MixinExtras is a companion library to Mixin, providing &lt;a href=&quot;https://github.com/LlamaLad7/MixinExtras/wiki&quot;&gt;new annotations&lt;/a&gt; to write your mixins in more expressive and compatible ways. It also features an easier way of specifying local captures. Due to its usefulness, MixinExtras is currently being Jar-in-Jar’d by a large amount of mods, increasing modpack sizes. With Fabric Loader bundling it now, all mods can use the library without needing to worry about distribution.&lt;/p&gt;

&lt;p&gt;Please note that Fabric Loader 0.15 went through a number of internal changes, notably the transition from &lt;a href=&quot;https://github.com/FabricMC/tiny-mappings-parser&quot;&gt;TMP&lt;/a&gt; to &lt;a href=&quot;https://github.com/FabricMC/mapping-io&quot;&gt;Mapping-IO&lt;/a&gt; and improvements to the lazy mapping loading, which reduce memory consumption. These changes do not affect most users, but mods that depend on unsupported, internal code might break with this update.&lt;/p&gt;

&lt;h3 id=&quot;loom-14&quot;&gt;Loom 1.4&lt;/h3&gt;
&lt;p&gt;Loom 1.4 includes enhancement for decompilers, support for deprecated modules in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabricApi.module&lt;/code&gt; (which allows dependencies on individual Fabric API modules), and many more bug fixes and performance improvements. Loom 1.4 requires Gradle 8.3 or later.&lt;/p&gt;

&lt;p&gt;Loom now includes built-in support for the Vineflower decompiler. It’s a fork of Fernflower, but with drastically improved output quality compared to the original. CFR remains the default decompiler for the time being. To decompile with Vineflower, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genSourcesWithVineflower&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genSources&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A new DSL has been introduced to make configuring data generation with best practices easier. This DSL automatically creates a run configuration and optional source set for data generation while also excluding the cache from the built JAR:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fabricApi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configureDataGeneration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;new-fabric-api-changes&quot;&gt;New Fabric API changes&lt;/h3&gt;
&lt;p&gt;With the help of many contributors, Fabric API has received some new features since the last update blog post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data Generation: add a method to register custom keys with priorities (ErrorCraft) &lt;!-- added after the blogpost, before 1.20.2 release --&gt;&lt;/li&gt;
  &lt;li&gt;Loot API: add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootTableEvents.LOADED&lt;/code&gt; (LLytho)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to those new features, this update also contains performance improvements for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketType&lt;/code&gt;-based networking. It now skips the serialization entirely in singleplayer, and the packet is now serialized on the network thread, not the main thread. Thanks to deirn for making these improvements!&lt;/p&gt;

&lt;h3 id=&quot;breaking-changes-in-1203&quot;&gt;Breaking changes in 1.20.3&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetTypeRegistry&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WoodTypeRegistry&lt;/code&gt; of the Object Builder API, previously deprecated, were removed. Please use the builders provided in the same API.&lt;/p&gt;

&lt;p&gt;The following APIs in the Transfer API module, all previously deprecated, were removed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContainerItemContext#withInitial&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storage#simulateInsert&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simulateExtract&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exactView&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;minecraft-changes&quot;&gt;Minecraft changes&lt;/h2&gt;
&lt;p&gt;Minecraft 1.20.3 introduces some breaking changes to major developer-facing APIs.&lt;/p&gt;

&lt;h3 id=&quot;block-codecs&quot;&gt;Block codecs&lt;/h3&gt;
&lt;p&gt;Mojang now uses codecs to serialize blocks - specifically, instances of a particular type of block. You might need to implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCodec&lt;/code&gt; method in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Block&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;However, the block codecs are &lt;strong&gt;currently unused&lt;/strong&gt;. This means that you can return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; or throw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnsupportedOperationException&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCodec&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;That being said, it is still recommended to familiarize yourself with using codecs, to future-proof your code and prevent potential porting pains in the future.&lt;/p&gt;

&lt;h3 id=&quot;text&quot;&gt;Text&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; also got a codec, and now is serialized using it (including when interacting with Gson). Over the network the text is now sent as an NBT.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Important change: &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text#translatable&lt;/code&gt; now expects all arguments to be numbers, boolean, strings, or other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;s.&lt;/strong&gt; To pass things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockPos&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identifier&lt;/code&gt;, which were previously implicitly converted to strings, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stringifiedTranslatable&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For those who have previously used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codecs.TEXT&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRINGIFIED_TEXT&lt;/code&gt;, it’s time to switch to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextCodecs.CODEC&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextCodecs.STRINGIFIED_CODEC&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Serializer&lt;/code&gt; inner class was split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serializer&lt;/code&gt; (to use as a Gson adapter) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serialization&lt;/code&gt; (contains static methods). The methods were also renamed; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toJson&lt;/code&gt; is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toJsonString&lt;/code&gt; to clarify return value.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style.Serializer&lt;/code&gt; is gone; it is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style.Codecs&lt;/code&gt; and holds the codec only.&lt;/li&gt;
  &lt;li&gt;In related news, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf#readUnlimitedText&lt;/code&gt; was added; this reads an infinite amount of text with no size limit. Most S2C packets now use this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ticks&quot;&gt;Ticks&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tick&lt;/code&gt; command from the Carpet mod arrived in the vanilla game. This change affects both the server and the client. To support this functionality in your mod:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getTickManager().shouldTick()&lt;/code&gt; to check if things should tick in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;START_WORLD_TICK&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;END_WORLD_TICK&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;START_SERVER_TICK&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;END_SERVER_TICK&lt;/code&gt; event.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TickManager&lt;/code&gt; can be obtained from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinecraftServer#getTickManager&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;World#getTickManager&lt;/code&gt; (works with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientWorld&lt;/code&gt; as well).&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldSkipTick&lt;/code&gt; for checking if an entity should be ticked (beware, it is the inverse of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldTick&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Note: &lt;strong&gt;You do not need to call these checks inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entity&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockEntity&lt;/code&gt; tick methods or events.&lt;/strong&gt; Only call inside server/world tick events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is also now possible for the game to run faster or slower than 50 MSPT intentionally (as opposed to through lag). Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TickManager#getMillisPerTick()&lt;/code&gt; to determine the intended MSPT.&lt;/p&gt;

&lt;h3 id=&quot;blocks&quot;&gt;Blocks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractBlock#randomTick&lt;/code&gt; no longer calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scheduledTick&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetType&lt;/code&gt; received new fields specifying pressure plate activation conditions and button interactions with projectiles/Breezes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColoredFallingBlock&lt;/code&gt; was added, replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GravelBlock&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SandBlock&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PowderSnowCauldronBlock&lt;/code&gt; was removed; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LeveledCauldronBlock&lt;/code&gt; handles the logic now.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransparentBlock&lt;/code&gt; was split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TranslucentBlock&lt;/code&gt;, which renders in a translucent way (like slime and ice blocks), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransparentBlock&lt;/code&gt;, which extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TranslucentBlock&lt;/code&gt; and is used by grates and glass blocks. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractGlassBlock&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GlassBlock&lt;/code&gt; were removed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FernBlock&lt;/code&gt; is renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShortPlantBlock&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SaplingGenerator&lt;/code&gt; is now in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt; package, and individual generator classes were removed and replaced with fields.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractBlock#onStateReplaced&lt;/code&gt; implementations for block entities were consolidated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemScatterer#onStateReplaced&lt;/code&gt;. Make sure to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt; AFTER calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemScatterer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootableContainerBlockEntity&lt;/code&gt; logics were split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootableInventory&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkLootInteraction&lt;/code&gt; was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateLoot&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootableContainerBlockEntity&lt;/code&gt; still implements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootableInventory&lt;/code&gt;, but this allows other block entities like decorated pots to share the logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;entities&quot;&gt;Entities&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Boats, minecarts, and other player-constructed vehicles should now extend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VehicleEntity&lt;/code&gt;. This provides the wobble effect seen when hitting that entity.&lt;/li&gt;
  &lt;li&gt;Various non-living entities (including projectiles and TNT) received &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copyFrom&lt;/code&gt; override to copy the owner.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersistentProjectileEntity&lt;/code&gt; and its subclasses now take the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; in the constructor, representing the item stack form that players can pick up. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getItemStack&lt;/code&gt; returns the stack as-is, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asItemStack&lt;/code&gt; returns a copy (potentially reflecting the changes like potion override).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpawnReason&lt;/code&gt; got two methods: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isAnySpawner&lt;/code&gt; (spawner &amp;amp; trial spawner) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isTrialSpawner&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;canSpawn&lt;/code&gt; methods should check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isAnySpawner&lt;/code&gt;, and make the entity exempt from biome/height requirements imposed for natural spawn.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;client&quot;&gt;Client&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PopupScreen&lt;/code&gt; was added. This screen, unlike other screens, renders on top of an existing screen. The popup can include a message, an image, and buttons (such as “Open Link”). To create an instance, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Builder&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckboxWidget&lt;/code&gt; is now built using a builder.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntryListWidget&lt;/code&gt; no longer takes the bottom coordinate in the constructor. It also actually became a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Widget&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClickableWidget#render&lt;/code&gt; was made &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; to prevent overrides of that method from not calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super.render&lt;/code&gt; and preventing the tooltip from rendering. Subclasses must override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderWidget&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;misc&quot;&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommandManager#execute&lt;/code&gt; methods no longer return an integer return value. To get the return value, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerCommandSource#withReturnValueConsumer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecipeProvider&lt;/code&gt; methods received some changes. Some JSON builders and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateCookingRecipes&lt;/code&gt; now require passing the constructor of recipe class, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CampfireCookingRecipe::new&lt;/code&gt;. Other builders no longer require the serializer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntityType#HEROBRINE&lt;/code&gt; was removed. (Wait, was this ever added in the first place?)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">It’s only been two months since we published the last article on Minecraft updates, but here we are. Minecraft 1.20.3 is to be released in the near future with some changes affecting mod makers.</summary></entry><entry><title type="html">Fabric for Minecraft 1.20.2</title><link href="https://fabricmc.net/2023/09/12/1202.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.20.2" /><published>2023-09-12T00:00:00+00:00</published><updated>2023-09-12T00:00:00+00:00</updated><id>https://fabricmc.net/2023/09/12/1202</id><content type="html" xml:base="https://fabricmc.net/2023/09/12/1202.html">&lt;p&gt;Minecraft 1.20.2 will be released in the near future, again with some changes that impact many mods.&lt;/p&gt;

&lt;p&gt;As usual, we ask players to be patient, and give mod developers time to update to this new version.&lt;/p&gt;

&lt;p&gt;Here is a list of all major modder-facing changes in this version. Note that all code references are using Yarn mappings; modders using alternative mappings may need to use different names.&lt;/p&gt;

&lt;h2 id=&quot;fabric-changes&quot;&gt;Fabric changes&lt;/h2&gt;
&lt;p&gt;Developers should use Loom 1.3 (at the time of writing) to develop mods for Minecraft 1.20.2. Players should install the latest stable version of Fabric Loader (currently 0.14.22) to play 1.20.2.&lt;/p&gt;

&lt;h3 id=&quot;loom-13&quot;&gt;Loom 1.3&lt;/h3&gt;
&lt;p&gt;Loom 1.3 includes fixes to debugging, Kotlin 1.9.0 support, reproducable builds by default and many other smaller fixes and improvements.&lt;/p&gt;

&lt;h3 id=&quot;new-fabric-api-changes&quot;&gt;New Fabric API changes&lt;/h3&gt;
&lt;p&gt;With the help of many contributors, Fabric API has received several new features since the last update blog post:&lt;/p&gt;

&lt;!-- yeah, sort it (alphabetical of module name) --&gt;

&lt;ul&gt;
  &lt;li&gt;Client Tags: add support for partially synced client tags. (dexman545)&lt;/li&gt;
  &lt;li&gt;Particles v1: add event for preventing particle tinting for colored blocks. (Juxxel)&lt;/li&gt;
  &lt;li&gt;Registry Sync: add dynamic registry API (Juxxel)&lt;/li&gt;
  &lt;li&gt;Transitive Access Wideners: some more TAWs for block creation and block loot tables (Shnupbups)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes-and-deprecations&quot;&gt;Breaking changes and deprecations&lt;/h3&gt;
&lt;p&gt;The following deprecated APIs were removed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-networking-v0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-loot-tables-v1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootEntryTypeRegistry&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-content-registries-v0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CriterionRegistry&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-object-builder-api-v1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, there were some module-wide deprecations. Deprecated modules were previously removed from the JAR used by developers by default, while still being distributed to all players. We have not previously classified this as a breaking change, since the deprecation has no effect on players.&lt;/p&gt;

&lt;p&gt;This opt-in system, however, caused great confusion among developers during the Models API deprecation process. For this reason, &lt;strong&gt;deprecated modules are now available by default&lt;/strong&gt; in the development environment.&lt;/p&gt;

&lt;p&gt;To restore the old behavior and &lt;strong&gt;disable deprecated modules&lt;/strong&gt;, use the following:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;modImplementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;net.fabricmc.fabric-api:fabric-api:0.88.2+1.20.2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fabric-api-deprecated&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;breaking-change-custom-registry-tags&quot;&gt;Breaking change: custom registry tags&lt;/h4&gt;
&lt;p&gt;Tags for static custom registry entries (created with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricRegistryBuilder&lt;/code&gt;) must now be placed under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tags/registry_namespace/registry_path/&lt;/code&gt;, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tags/registry_path/&lt;/code&gt;. For example, if the registry is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_mod:tiny_potato&lt;/code&gt;, the tags should be placed under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tags/my_mod/tiny_potato/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This matches the behavior for custom dynamic registries that is recently introduced to Fabric API. &lt;strong&gt;This does not affect vanilla tags&lt;/strong&gt; like blocks, items, or entity types.&lt;/p&gt;

&lt;h4 id=&quot;blocksettype-and-woodtype&quot;&gt;BlockSetType and WoodType&lt;/h4&gt;
&lt;p&gt;To make the API easier to use, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetTypeRegistry&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WoodTypeRegistry&lt;/code&gt; are now replaced with builders, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetTypeBuilder&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WoodTypeBuilder&lt;/code&gt;. The registries were deprecated.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- BlockSetTypeRegistry.registerWood(TEAL_TYPE_ID);
- WoodTypeRegistry.register(TEAL_TYPE_ID, TEAL_BLOCK_SET_TYPE);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ BlockSetTypeBuilder.copyOf(BlockSetType.OAK).build(TEAL_TYPE_ID);
+ WoodTypeBuilder.copyOf(WoodType.OAK).build(TEAL_TYPE_ID, TEAL_BLOCK_SET_TYPE);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;transfer-api&quot;&gt;Transfer API&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storage#exactView&lt;/code&gt; was deprecated for removal due to lack of use and its complexity.&lt;/p&gt;

&lt;p&gt;Two methods from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storage&lt;/code&gt; moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StorageUtil&lt;/code&gt;. They are: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simulateInsert&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simulateExtract&lt;/code&gt;. The methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storage&lt;/code&gt; are now deprecated for removal. This allows &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simulateExtract&lt;/code&gt; to work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StorageView&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;models-api-replacement&quot;&gt;Models API replacement&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;This section is currently incomplete. Please check back later!&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;rendering-data-attachments-replacement&quot;&gt;Rendering Data Attachments replacement&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;This section is currently incomplete. Please check back later!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;minecraft-changes&quot;&gt;Minecraft changes&lt;/h2&gt;
&lt;p&gt;Minecraft 1.20.2 introduces some breaking changes to major developer-facing APIs.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;
&lt;p&gt;While the developer-facing breaking changes to Networking API were minimum, the API’s implementation was rewritten to use the new configuration stage, between login and play stages. This change hopefully resolves the longstanding issue with proxy servers.&lt;/p&gt;

&lt;p&gt;However, some mods need to change the code to utilize the configuration stage. Here is the summary of the changes; those who work on the raw networking stack (to develop cross-platform APIs or proxies) should read &lt;a href=&quot;https://github.com/FabricMC/fabric/pull/3244&quot;&gt;the protocol proposal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mods that use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerPlayNetworking&lt;/code&gt;, for non-configuration purposes, are likely unaffected.&lt;/strong&gt; Mods that use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerLoginNetworking&lt;/code&gt;, or implement configuration syncing/mod version checking feature, should check the note below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Before 1.20.2, most of the server-client communication took place during gameplay, via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerPlayNetworking&lt;/code&gt;. Mods who wanted to communicate before the player joined had to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerLoginNetworking&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In 1.20.2, after the player authenticates, but before the player joins the world (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerPlayerEntity&lt;/code&gt; instance is created), there exist a phase where the client and the server can communicate to configure each other. This is the “configuration stage”.&lt;/li&gt;
  &lt;li&gt;During this stage, the server executes “tasks” one by one. For example, you can define a task that queries the client’s mod version and disconnects the client if the versions differ.&lt;/li&gt;
  &lt;li&gt;Once all tasks are completed, the player joins the world.&lt;/li&gt;
  &lt;li&gt;Importantly, the code allows the server to force a player back to the configuration stage. This feature is not used in vanilla. For example, a minigame server might use this feature to move players between the lobby and the minigames.&lt;/li&gt;
  &lt;li&gt;Configuration stage is designed to allow mods to reliably exchange packets before the player joins. If you previously have used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerLoginNetworking&lt;/code&gt;, it is highly recommended to switch to configuration stage, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerConfigurationNetworking&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of implementing one-way syncing, from server to client:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// define ConfigS2CPacket; see https://gist.github.com/apple502j/9c6b9e5e8dec37cbf6f3916472a79d57&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;ServerConfigurationConnectionEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONFIGURE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ServerConfigurationNetworking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigS2CPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Client side:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ClientConfigurationNetworking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerGlobalReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigS2CPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something with packet&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example of sending a packet to, and receiving a packet from, a client:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// define ConfigC2SPacket, which is sent as a response to S2CPacket&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerPlayerConfigurationTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerPlayerConfigurationTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerPlayerConfigurationTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my_mod_id:my_mod_config&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerPlayerConfigurationTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerConfigurationNetworking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createS2CPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigS2CPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;ServerConfigurationConnectionEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONFIGURE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This if block is required! Otherwise the client gets stuck in connection screen&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if the client cannot handle the packet.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerConfigurationNetworking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canSend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigS2CPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Optional; if you want to require certain mods, disconnect the client.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You need to install Tiny Potato Mod!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;ServerConfigurationNetworking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerGlobalReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigC2SPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Check packet here&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Warning: if you do not call completeTask, the client gets stuck!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;completeTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Client side:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ClientConfigurationNetworking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerGlobalReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigS2CPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something with packet&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// send a response&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigC2SPacket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;response&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is one breaking change to Networking API: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientPlayNetworking#createC2SPacket&lt;/code&gt; now returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Packet&amp;lt;ServerCommonPacketListener&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Packet&amp;lt;ServerPlayPacketListener&amp;gt;&lt;/code&gt; (and similar changes with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createS2CPacket&lt;/code&gt; as well.)&lt;/p&gt;

&lt;h3 id=&quot;status-effects&quot;&gt;Status effects&lt;/h3&gt;
&lt;p&gt;Status effects are now stored using string ID, instead of integer ID. &lt;strong&gt;Fabric does not migrate the data by itself.&lt;/strong&gt; We expect someone to make a mod for data conversion.&lt;/p&gt;

&lt;p&gt;This change also meant that Registry Sync module no longer has to keep track of the raw IDs of registry entries on disk. The tracker file will NOT be automatically deleted. API-wise, this means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryAttribute#PERSISTED&lt;/code&gt; is gone.&lt;/p&gt;

&lt;h3 id=&quot;recipes-and-advancements&quot;&gt;Recipes and advancements&lt;/h3&gt;
&lt;p&gt;Recipe and advancement code was refactored to use records. In addition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecipeEntry&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdvancementEntry&lt;/code&gt; is used in many places where a raw recipe or advancement is used previously. As the name suggests, this is a pair of the ID and the value. If you want to get the recipe/advancement itself, call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.value()&lt;/code&gt;. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecipeProvider&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exporter&lt;/code&gt; is now of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecipeExporter&lt;/code&gt;, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Consumer&amp;lt;RecipeJsonProvider&amp;gt;&lt;/code&gt;. The usage remains the same; to output a recipe, call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Recipes and ingredients are serialized to and from the disk using Codecs. Fabric API’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomIngredientSerializer&lt;/code&gt; now has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codec&lt;/code&gt; method that returns codec, instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; taking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JsonObject&lt;/code&gt;. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; taking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PacketByteBuf&lt;/code&gt; still exists.) To make the migration easier, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codecs#fromJsonSerializer&lt;/code&gt; - though this is deprecated.&lt;/p&gt;

&lt;p&gt;Yarn mapping received a couple of renames. Most significantly, “input” and “output” are now called “ingredient” and “result”.&lt;/p&gt;

&lt;h3 id=&quot;trading&quot;&gt;Trading&lt;/h3&gt;
&lt;p&gt;A new experiment for rebalancing villager and wandering trader trades is added. While this is labeled as an experiment, it is an officially-supported feature that can be enabled in a release.&lt;/p&gt;

&lt;p&gt;While the internal changes to villagers were minimum, there were substantial changes to how wandering trader offers are picked in the experiment.&lt;/p&gt;

&lt;p&gt;Previously, the trades were selected in a similar way to villagers, where level 0 indicated common items and level 1 indicated rare items. The experiment replaces this with a pool-based method; there are several pools, and from each pool the game picks certain numbers of offers.&lt;/p&gt;

&lt;p&gt;We are currently designing an API that supports the experiment. For now, the current code works for existing worlds and newly created worlds without the experiment.&lt;/p&gt;

&lt;h3 id=&quot;gui&quot;&gt;GUI&lt;/h3&gt;
&lt;p&gt;Two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screen&lt;/code&gt; related changes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onMouseScrolled&lt;/code&gt; method now takes both horizontal and vertical scroll amount. Most mouses do not support horizontal scrolling, so use that feature with caution. Another change is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderBackground&lt;/code&gt; method now takes mouse positions and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tickDelta&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntryListWidget#mouseClicked&lt;/code&gt;, the mouse button is now automatically checked. Override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isSelectButton&lt;/code&gt; to allow right-clicking entries to select one. The checks in individual entries are now redundant.&lt;/p&gt;

&lt;p&gt;Texture rendering methods have changed; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawTexture&lt;/code&gt; calls should be replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawGuiTexture&lt;/code&gt;. Note that since the game no longer uses atlases in GUI textures, there is no need to specify UV.&lt;/p&gt;

&lt;h3 id=&quot;miscellaneous-changes&quot;&gt;Miscellaneous changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MessageDecorator&lt;/code&gt; is now synchronous.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeleeAttackGoal#canAttack&lt;/code&gt; was added. This is checked inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attack&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;In Yarn, several classes relating to session, player reporting, and telemetry were moved to a new package, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client.session&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Minecraft 1.20.2 will be released in the near future, again with some changes that impact many mods.</summary></entry><entry><title type="html">Fabric for Minecraft 1.20</title><link href="https://fabricmc.net/2023/05/25/120.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.20" /><published>2023-05-25T00:00:00+00:00</published><updated>2023-05-25T00:00:00+00:00</updated><id>https://fabricmc.net/2023/05/25/120</id><content type="html" xml:base="https://fabricmc.net/2023/05/25/120.html">&lt;p&gt;Minecraft 1.20 - the Trails and Tales Update - &lt;a href=&quot;https://www.minecraft.net/en-us/article/trails-tales-update-coming&quot;&gt;releases on June 7th 2023&lt;/a&gt;, again with a number of changes that impact many mods.&lt;/p&gt;

&lt;p&gt;As usual, we ask players to be patient, and give mod developers time to update to this new version.&lt;/p&gt;

&lt;p&gt;Here is a list of all major modder-facing changes in this version. Note that all code references are using Yarn mappings; modders using alternative mappings may need to use different names.&lt;/p&gt;

&lt;h2 id=&quot;fabric-changes&quot;&gt;Fabric changes&lt;/h2&gt;
&lt;p&gt;Developers should use Loom 1.2 (at the time of writing) to develop for Minecraft 1.20. Players should install the latest stable version of Fabric Loader (currently 0.14.19) to play 1.20.&lt;/p&gt;

&lt;h3 id=&quot;loom-12&quot;&gt;Loom 1.2&lt;/h3&gt;
&lt;p&gt;Loom 1.2 is a small update focused on game library handling improvements and official Windows ARM native support. &lt;strong&gt;Loom 1.2 requires Gradle 8.1.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-fabric-api-changes&quot;&gt;New Fabric API changes&lt;/h3&gt;
&lt;p&gt;Fabric API added many features since the last update blog post:&lt;/p&gt;

&lt;!-- maybe sort alphabetically from now on? --&gt;

&lt;ul&gt;
  &lt;li&gt;Data Generation: add codec data provider. (ErrorCraft)&lt;/li&gt;
  &lt;li&gt;Interaction Events: provide fake player API. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Networking: add packet-based API similar to vanilla networking system. See &lt;a href=&quot;https://gist.github.com/apple502j/9c6b9e5e8dec37cbf6f3916472a79d57&quot;&gt;the gist&lt;/a&gt; for migration tips. Note that the existing API is not deprecated in any way. (apple502j)&lt;/li&gt;
  &lt;li&gt;Renderer API: add material inspection and glint material property, remove texture indices. (PepperCode1, Technici4n)&lt;/li&gt;
  &lt;li&gt;Transfer API: add slotted storage and non-empty iterator. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Other small additions to various APIs, such as Convention Tag and Object Builder&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes-and-deprecations&quot;&gt;Breaking changes and deprecations&lt;/h3&gt;
&lt;p&gt;Aside from changes related to Minecraft code changes (which are discussed below), no breaking change to the API was introduced.&lt;/p&gt;

&lt;p&gt;During one of the code refactors, one bug related to the Registry Sync was “accidentally” fixed. The bug previously allowed clients with Fabric API (but without content mods) to join a server with modded contents, despite the mod being missing on the client. The refactor was merged to both 1.19.4 and 1.20 snapshot branches; however, the bug was reintroduced to 1.19.4 only to prevent unexpected breakage. If you have previously relied on the bug, make sure to have users install the mods on the client.&lt;/p&gt;

&lt;p&gt;A few rarely-used APIs within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventFactory&lt;/code&gt; were deprecated. They were intended to be used for profiling events; however, the standard Java profiler provides a better result.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalidate&lt;/code&gt; method was terminally deprecated, to be removed in future versions.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isProfilingEnabled&lt;/code&gt; method was deprecated and now always returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getHandlerName&lt;/code&gt; method was also deprecated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fabric-rendering-api-deprecations&quot;&gt;Fabric Rendering API deprecations&lt;/h4&gt;
&lt;p&gt;Many methods of the renderer API had an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int spriteIndex&lt;/code&gt; parameter that was always 0. It was removed, and the naming of some methods was improved in the process. The boolean &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disableAo&lt;/code&gt; material property was also replaced by a more flexible TriState for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ambientOcclusion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The old methods are now deprecated, here are a few examples of migrating away from them:&lt;/p&gt;
&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  MaterialFinder finder = ...;
&lt;span class=&quot;gd&quot;&gt;- materialFinder.blendMode(0, &amp;lt;blend mode&amp;gt;);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ materialFinder.blendMode(&amp;lt;blend mode&amp;gt;);
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;- materialFinder.disableAo(0, true);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ materialFinder.ambientOcclusion(TriState.FALSE);
&lt;/span&gt;
  QuadView quadView = ...;
&lt;span class=&quot;gd&quot;&gt;- quadView.spriteColor(0, -1, -1, -1, -1);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ quadView.color(-1, -1, -1, -1);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The full list of renames can be found &lt;a href=&quot;https://github.com/FabricMC/fabric/pull/3044&quot;&gt;in the pull request description&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new methods do not have a default implementation in 1.20. This does not affect mods using the Renderer API, however third-party renderers such as Canvas or Indium must add support for them.&lt;/p&gt;

&lt;h2 id=&quot;minecraft-changes&quot;&gt;Minecraft changes&lt;/h2&gt;
&lt;p&gt;Minecraft 1.20 introduces some breaking changes to major developer-facing APIs.&lt;/p&gt;

&lt;h3 id=&quot;material-or-the-lack-thereof&quot;&gt;Material (or the lack thereof)&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Material&lt;/code&gt; was a class that indicated the type of blocks, such as plant or metal. This class no longer exists:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To specify the properties, such as the map color and whether the block is replaceable, use the block settings.
One note on the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solid&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notSolid&lt;/code&gt; block settings: These two methods override the default solid block check. If a block is not specified as solid or not solid explicitly, then the game checks whether the shape’s average side length is more than 0.73 OR whether the block is taller than 1 block. If either is true, the block is solid.&lt;/li&gt;
  &lt;li&gt;To get those values, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockState&lt;/code&gt; methods. (You may need to refactor your code if your method takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Block&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockState&lt;/code&gt;.)&lt;/li&gt;
  &lt;li&gt;To check if a block is of a certain type, use block tags or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Related changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetType&lt;/code&gt; now has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;canOpenByHand&lt;/code&gt; field, used by doors and trapdoors.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Block#canMobSpawnInside&lt;/code&gt; now takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockState&lt;/code&gt;. Previously it took no arguments.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockState#blocksMovement&lt;/code&gt;, which returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; for all solid blocks except cobwebs and bamboo shoots, was added.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Block.Settings#of&lt;/code&gt; method was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;. Fabric API’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricBlockSettings#of&lt;/code&gt; was renamed as well, and the old method was deprecated.&lt;/li&gt;
  &lt;li&gt;Fabric API: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricMaterialBuilder&lt;/code&gt; was removed.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- new Block(AbstractBlock.Settings.of(Material.PLANT, MapColor.GREEN))
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ new Block(AbstractBlock.Settings.create().mapColor(MapColor.GREEN).pistonBehavior(PistonBehavior.DESTROY))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;world-changes&quot;&gt;World changes&lt;/h3&gt;
&lt;p&gt;One of the biggest, yet subtle changes in this version is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entity#world&lt;/code&gt; is now private. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entity#getWorld&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entity#getServerWorld&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- World world = player.world;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ World world = player.getWorld();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RedstoneView&lt;/code&gt; provides redstone-related methods that previously existed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;World&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;screen-and-rendering-changes&quot;&gt;Screen and rendering changes&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawableHelper&lt;/code&gt;, a utility that is frequently used by subclassing it, turned into an object passed to rendering methods: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawContext&lt;/code&gt;. This replaces the various &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatrixStack matrices&lt;/code&gt; parameters. You usually do not need to construct one yourself.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- public void render(MatrixStack matrices) {
-   RenderSystem.setShaderTexture(0, TEXTURE);
-   drawTexture(matrices, ...);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ public void render(DrawContext context) {
+   context.drawTexture(TEXTURE, ...); // texture ID is now specified here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following new methods were added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawContext&lt;/code&gt;, replacing other methods in various places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setShaderColor&lt;/code&gt; (wraps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenderSystem&lt;/code&gt; one, which still exists)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawTextWithShadow&lt;/code&gt; (replaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextRenderer#drawWithShadow&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawText&lt;/code&gt; (wraps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextRenderer#draw&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawTextWrapped&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawItem&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawItemWithoutEntity&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawItemInSlot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawItemTooltip&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawTooltip&lt;/code&gt; (replaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screen#renderTooltip&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawHoverEvent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, various rendering methods now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawContext&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatrixStack&lt;/code&gt;. If you still somehow need the matrix stack, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawContext#getMatrices&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Fabric API changes related to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rendering API’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HudRenderCallback&lt;/code&gt;, Screen API’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenEvents.beforeRender&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenEvents.afterRender&lt;/code&gt; now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawContext&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatrixStack&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screens.getItemRenderer&lt;/code&gt; is removed. This can be easily replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinecraftClient#getItemRenderer&lt;/code&gt;, although this is usually not necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And one unrelated change: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screen#passEvents&lt;/code&gt; was removed, therefore screens can no longer pass events.&lt;/p&gt;

&lt;h3 id=&quot;item-group-changes&quot;&gt;Item group changes&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroup&lt;/code&gt;s are now registered in a registry. This means that the vanilla game tracks them using identifiers, just like blocks and items - and it is registered in the same way as those.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- public static final ItemGroup ITEM_GROUP = FabricItemGroup.builder(new Identifier(MOD_ID, &quot;example&quot;))
-   .icon(() -&amp;gt; new ItemStack(Items.DIAMOND_PICKAXE))
-   .displayName(Text.translatable(&quot;example-mod.group.example&quot;))
-   .build();
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ public static final RegistryKey&amp;lt;ItemGroup&amp;gt; ITEM_GROUP = RegistryKey.of(RegistryKeys.ITEM_GROUP, new Identifier(MOD_ID, &quot;example&quot;));
+
+ @Override
+ public void onInitialize() {
+   Registry.register(Registries.ITEM_GROUP, ITEM_GROUP, FabricItemGroup.builder()
+       .icon(() -&amp;gt; new ItemStack(Items.DIAMOND_PICKAXE))
+       .displayName(Text.translatable(&quot;example-mod.group.example&quot;))
+       .build()); // build() no longer registers by itself
+ }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricItemGroup#builder&lt;/code&gt; takes no arguments now, since the ID is assigned by the registry. Note, &lt;strong&gt;you must now call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayName&lt;/code&gt; manually or it will crash!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroupEvents.modifyEntriesEvent&lt;/code&gt; will now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroup&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identifier&lt;/code&gt;. Note that vanilla &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroups&lt;/code&gt; fields are now registry keys, so code using those just needs to be recompiled. And with the game now providing the identifier, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IdentifiableItemGroup&lt;/code&gt; is removed.&lt;/p&gt;

&lt;p&gt;Finally, one small breaking change to Data Generation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricLanguageProvider.TranslationBuilder#add&lt;/code&gt; will now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroup&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;itemstack-changes&quot;&gt;ItemStack changes&lt;/h3&gt;
&lt;p&gt;Code modifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; should now use the combined methods (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copyWithCount&lt;/code&gt;) instead of 2 method calls (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setCount&lt;/code&gt;) to properly handle empty stacks. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack#copyAndEmpty&lt;/code&gt; was added to move the contents of one stack into a new copy.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- ItemStack copy = stack.copy();
- copy.setCount(1);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ ItemStack copy = stack.copyWithCount(1);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple of equality methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; were removed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack#isItemEqual&lt;/code&gt;: use the static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;areItemsEqual()&lt;/code&gt; method instead.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack#areNbtEqual&lt;/code&gt;: use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;canCombine&lt;/code&gt; (which also checks for items) or compare NBT yourself instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;loot-changes&quot;&gt;Loot changes&lt;/h3&gt;
&lt;p&gt;Predicates and item modifiers (or, in legacy terms, loot conditions and loot functions) are now managed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootManager&lt;/code&gt;. They are identified using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootDataKey&lt;/code&gt;, similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getTable&lt;/code&gt; is renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getLootTable&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getElement&lt;/code&gt; can be used to get loot tables, predicates, or item modifiers.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootContext.Builder&lt;/code&gt; is moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootContextParameterSet.Builder&lt;/code&gt; and its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameter&lt;/code&gt; method was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putDrop&lt;/code&gt; method was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addDynamicDrop&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getNullable&lt;/code&gt; method was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOptional&lt;/code&gt; for consistency. The loot inventory seed is now given via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supplyInventory&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;other-small-but-noteworthy-changes&quot;&gt;Other small, but noteworthy changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fabric Content Registries’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VillagerPlantableRegistry&lt;/code&gt; was replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemTags.VILLAGER_PLANTABLE_SEEDS&lt;/code&gt; (data pack tags).&lt;/li&gt;
  &lt;li&gt;Herobrine was removed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecipeProvider#offerWoolDyeingRecipe&lt;/code&gt; and similar methods were merged to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offerDyeableRecipes&lt;/code&gt; (which also offers re-coloring).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerCommandSource#sendFeedback&lt;/code&gt; now takes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supplier&amp;lt;Text&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; for performance reasons. Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;() -&amp;gt;&lt;/code&gt; and it should be good to go.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Minecraft 1.20 - the Trails and Tales Update - releases on June 7th 2023, again with a number of changes that impact many mods.</summary></entry><entry><title type="html">Fabric for Minecraft 1.19.4</title><link href="https://fabricmc.net/2023/03/01/1194.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.19.4" /><published>2023-03-01T00:00:00+00:00</published><updated>2023-03-01T00:00:00+00:00</updated><id>https://fabricmc.net/2023/03/01/1194</id><content type="html" xml:base="https://fabricmc.net/2023/03/01/1194.html">&lt;p&gt;Minecraft 1.19.4 is almost here, with a number of changes that impact most mods. As noted &lt;a href=&quot;/2022/11/24/1193.html&quot;&gt;previously&lt;/a&gt;, ‘minor’ releases starting from 1.19.3 can include major changes, and neither mod authors nor players should assume compatibility.&lt;/p&gt;

&lt;p&gt;As usual, we ask players to be patient, and give mod developers time to update to this new version.&lt;/p&gt;

&lt;p&gt;Here is a list of all major modder-facing changes in this version. Note that all code references are using Yarn mappings; modders using alternative mappings may need to use different names.&lt;/p&gt;

&lt;h2 id=&quot;fabric-changes&quot;&gt;Fabric changes&lt;/h2&gt;
&lt;p&gt;Developers should use Loom 1.1 (at the time of writing) to develop for Minecraft 1.19.4. Players should install the latest stable version of Fabric Loader (currently 0.14.14) to play 1.19.4.&lt;/p&gt;

&lt;h3 id=&quot;new-fabric-api-features&quot;&gt;New Fabric API features&lt;/h3&gt;
&lt;p&gt;Fabric API added many features since the last update blog post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Language files provided by mods are now loaded on the server. (Teddy Li)&lt;/li&gt;
  &lt;li&gt;Recipe API: add custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ingredient&lt;/code&gt;s. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Data Generation: support resource conditions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockLootTableGenerator&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;GameTest: improve structure loading to support both NBT and SNBT-based structures. (apple502j)&lt;/li&gt;
  &lt;li&gt;Resource Conditions: add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry_contains&lt;/code&gt; condition. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Added Client Message Events (Kevin, Juuz, Sideroo)&lt;/li&gt;
  &lt;li&gt;Other small additions to various APIs, such as Object Builder and Renderer API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes-and-deprecations&quot;&gt;Breaking changes and deprecations&lt;/h3&gt;
&lt;p&gt;In addition to changes described below, Transfer API received two breaking changes (applicable to 1.19.4):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mods now need to handle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; directions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FluidStorage&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStorage&lt;/code&gt;, which indicate full inventory without side restriction.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exactView&lt;/code&gt; method with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transaction&lt;/code&gt; parameter, deprecated for removal, is removed. Use the transactionless method instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Registry Sync, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricRegistryBuilder&lt;/code&gt; no longer requires the type class to be passed - just the registry key. The old methods were deprecated.&lt;/p&gt;

&lt;p&gt;In Block Render Layer API, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockRenderLayerMap&lt;/code&gt;’s useless item-related methods were deprecated for removal.&lt;/p&gt;

&lt;h2 id=&quot;minecraft-changes&quot;&gt;Minecraft changes&lt;/h2&gt;

&lt;p&gt;Minecraft 1.19.4 introduces some breaking changes to major developer-facing APIs.&lt;/p&gt;

&lt;h3 id=&quot;item-groups&quot;&gt;Item groups&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroup&lt;/code&gt; registration changed again. Callback passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroup.Builder#entries&lt;/code&gt; now takes two arguments, instead of three. Enabled features and operator permission flag are now passed via the context object.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;private static final ItemGroup ITEM_GROUP = FabricItemGroup.builder(new Identifier(MOD_ID, &quot;test_group&quot;))
&lt;/span&gt;    .icon(() -&amp;gt; new ItemStack(Items.DIAMOND))
&lt;span class=&quot;gd&quot;&gt;-   .entries((enabledFeatures, entries, operatorEnabled) -&amp;gt; {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+   .entries((context, entries) -&amp;gt; {
&lt;/span&gt;       entries.add(TEST_ITEM);
    })
    .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;damage-types&quot;&gt;Damage types&lt;/h3&gt;
&lt;p&gt;With the addition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/damage&lt;/code&gt;, damage related code has been refactored.&lt;/p&gt;

&lt;p&gt;Damage types can now be defined using a dynamic registry, with data packs. This also removed the constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DamageSource&lt;/code&gt;s. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DamageSources&lt;/code&gt; class holds several methods to get instances of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DamageSource&lt;/code&gt; with or without an attacker:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- targetEntity.damage(DamageSource.MAGIC, 4.0F);
- anotherEntity.damage(DamageSource.anvil(attacker), 1.0F);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ targetEntity.damage(world.getDamageSources().magic(), 4.0F);
+ anotherEntity.damage(world.getDamageSources().fallingAnvil(attacker), 1.0F);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getDamageSources&lt;/code&gt; method also exists in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entity&lt;/code&gt; as a shortcut.&lt;/p&gt;

&lt;p&gt;To check if damage is of a certain type, tags should be used. Several data pack predicates related to damages have changed to reflect this.&lt;/p&gt;

&lt;p&gt;Many damage related checks previously hardcoded in the game, such as fall damage-immune mobs (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleFallDamage&lt;/code&gt; override), are now handled using entity and damage type tags.&lt;/p&gt;

&lt;h3 id=&quot;block-set-types&quot;&gt;Block set types&lt;/h3&gt;
&lt;p&gt;Sounds of various blocks, such as doors, trapdoors, buttons, pressure plates, etc. are now configured by passing an instance of a new class, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetType&lt;/code&gt;, to the respective block constructors. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetType&lt;/code&gt;s can be created and registered using Object Builder API’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetTypeRegistry&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, signs and fence gates use the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WoodType&lt;/code&gt; to determine their sounds and sign textures. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WoodType&lt;/code&gt;s require a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockSetType&lt;/code&gt;, and can be registered using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WoodTypeRegistry&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;biome&quot;&gt;Biome&lt;/h3&gt;
&lt;p&gt;Biome precipitation is now a boolean. Whether it rains or snows is now entirely dependent on temperature and is positional; if the temperature is below &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.15&lt;/code&gt;, it snows. Biome Modification API’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setPrecipitation&lt;/code&gt; method now takes a boolean to reflect this, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Biome#getPrecipitation&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasPrecipitation&lt;/code&gt; methods were added to reflect this. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Biome#isHot&lt;/code&gt; is removed and replaced with tags for specific usecases.&lt;/p&gt;

&lt;p&gt;Biome JSON files should now have a boolean &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_precipitation&lt;/code&gt; field, not enum &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;precipitation&lt;/code&gt; field.&lt;/p&gt;

&lt;h3 id=&quot;guis-and-rendering&quot;&gt;GUIs and rendering&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenderSystem#enableTexture&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disableTexture&lt;/code&gt; has been removed. They are no longer necessary.&lt;/p&gt;

&lt;p&gt;Most rendering methods now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MatrixStack&lt;/code&gt; if they did not already. With this, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawableHelper#getZOffset&lt;/code&gt; is now gone, and all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawableHelper&lt;/code&gt; methods have turned into static methods, along with some Yarn renames:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawCenteredText&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawCenteredTextWithShadow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawStringWithShadow&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawWithShadow&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawTextWithShadow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ModelTransformation.Mode&lt;/code&gt; is replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ModelTransformationMode&lt;/code&gt; (notice the lack of dot). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextRenderer&lt;/code&gt; methods now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextLayerType&lt;/code&gt;, instead of boolean &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seeThrough&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;GUI code has received changes to support new keyboard navigation. After each keyboard navigation, the game recalculates the focused element; it creates a tree of elements, making sure only one element is focused at a time. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screen&lt;/code&gt; implementations should call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInitialFocus&lt;/code&gt; within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenHandlerType&lt;/code&gt; now requires a required feature set to be passed. This is usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FeatureFlags.VANILLA_FEATURES&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;recipes&quot;&gt;Recipes&lt;/h3&gt;
&lt;p&gt;Many recipe related methods now require a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryManager&lt;/code&gt; instance to be passed.&lt;/p&gt;

&lt;h3 id=&quot;entities&quot;&gt;Entities&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entity#stepHeight&lt;/code&gt; is now private. This must now be set using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setStepHeight&lt;/code&gt;. The getter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getStepHeight&lt;/code&gt; is added as well.&lt;/p&gt;

&lt;p&gt;References to “scoreboard tag” (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tag&lt;/code&gt;) are now renamed to “command tag”.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCausingEntity&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setCausingEntity&lt;/code&gt; and other owner-related methods have been merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOwner&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setOwner&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Several changes have been made to vehicles. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemSteerable&lt;/code&gt; methods are moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LivingEntity&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SaddledComponent&lt;/code&gt; fields are now private. The following methods were added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LivingEntity&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tickControlled&lt;/code&gt;, which is called every tick if the entity is being ridden and controlled by other entity. Set the entity rotation and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SaddledComponent#tickBoost&lt;/code&gt; here.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;travelControlled&lt;/code&gt;, from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemSteerable#travel&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getControlledMovementSpeed&lt;/code&gt;, which calculates the velocity from the user input.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSaddledSpeed&lt;/code&gt;, which calculates the velocity of the entity. Multiply the value with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SaddledComponent#getSpeed&lt;/code&gt; and return here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LivingEntity#getOffGroundSpeed&lt;/code&gt; was added. This controls the entity velocity when it is falling or flying.&lt;/p&gt;

&lt;h3 id=&quot;equipment&quot;&gt;Equipment&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wearable&lt;/code&gt; is renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Equipment&lt;/code&gt;, and is now implemented by shields. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Equipment&lt;/code&gt; items must now also implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getSlotType&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArmorItem&lt;/code&gt; constructor now takes an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArmorItem.ArmorType&lt;/code&gt; instead of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EquipmentSlot&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;blockpos-changes&quot;&gt;BlockPos changes&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec3i&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockPos&lt;/code&gt; constructors that take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Position&lt;/code&gt; (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec3d&lt;/code&gt;) are moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ofFloored&lt;/code&gt; method. This makes it clear which rounding mode is used.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- BlockPos pos = new BlockPos(3.14, 0.0, 3.14);
- BlockPos pos2 = new BlockPos(entity.getPos());
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ BlockPos pos = BlockPos.ofFloored(3.14, 0.0, 3.14);
+ BlockPos pos2 = BlockPos.ofFloored(entity.getPos());
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;texts&quot;&gt;Texts&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TranslatableTextContent&lt;/code&gt; now supports text fallbacks, used when no matching translation is found. To construct texts with fallbacks, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text#translatableWithFallback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenTexts&lt;/code&gt; received &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTINUE&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPACE&lt;/code&gt; predefined texts, as well as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;space&lt;/code&gt; method for chaining; for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;space().append(text)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;data-fixers&quot;&gt;Data fixers&lt;/h3&gt;
&lt;p&gt;The library that powers serialization codecs and world file updates, DataFixerUpper, received major performance improvements both in startup and update time.&lt;/p&gt;

&lt;p&gt;The library update and corresponding Minecraft changes are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NbtHelper&lt;/code&gt; are moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataFixTypes&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There is now a method to update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic&lt;/code&gt;s that aren’t NBT.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getDataVersion&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putDataVersion&lt;/code&gt; methods were added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NbtHelper&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataResult#error&lt;/code&gt; now expects a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supplier&amp;lt;String&amp;gt;&lt;/code&gt;, to lazy-evaluate the error message.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Util#getBootstrapExecutor&lt;/code&gt; is removed, because its only use was off-thread DataFixerUpper optimization (which is no longer off-thread). Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getMainWorkerExecutor&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Minecraft 1.19.4 is almost here, with a number of changes that impact most mods. As noted previously, ‘minor’ releases starting from 1.19.3 can include major changes, and neither mod authors nor players should assume compatibility.</summary></entry><entry><title type="html">Fabric for Minecraft 1.19.3</title><link href="https://fabricmc.net/2022/11/24/1193.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.19.3" /><published>2022-11-24T00:00:00+00:00</published><updated>2022-11-24T00:00:00+00:00</updated><id>https://fabricmc.net/2022/11/24/1193</id><content type="html" xml:base="https://fabricmc.net/2022/11/24/1193.html">&lt;p&gt;Minecraft 1.19.3 is almost here, with big changes to game internals. Beginning with this update, &lt;a href=&quot;https://help.minecraft.net/hc/en-us/articles/9971900758413&quot;&gt;Mojang have changed their versioning scheme&lt;/a&gt; such that ‘minor’ releases like this one may contain larger changes under the hood. As such, the changes in this version affect almost all mods (not even comparable to the changes in 1.18.2, and significantly bigger than 1.19). Here are the list of all major modder-facing changes in this version.&lt;/p&gt;

&lt;p&gt;As usual, we ask players to be patient, and give mod developers time to update to this new version.&lt;/p&gt;

&lt;h2 id=&quot;fabric-changes&quot;&gt;Fabric changes&lt;/h2&gt;
&lt;p&gt;Developers should use Loom 1.0 (at the time of writing) to develop for Minecraft 1.19.3.&lt;/p&gt;

&lt;p&gt;Minecraft 1.19.3 introduces numerous breaking changes to major developer-facing APIs.&lt;/p&gt;

&lt;h3 id=&quot;fabric-api-mod-id-change&quot;&gt;Fabric API Mod ID change&lt;/h3&gt;
&lt;p&gt;The mod ID of Fabric API is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-api&lt;/code&gt;. The old ID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric&lt;/code&gt; still works in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.mod.json&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;depends&lt;/code&gt;; however, the new ID is recommended for better user experience when Fabric API is missing.&lt;/p&gt;

&lt;h3 id=&quot;new-fabric-api-features&quot;&gt;New Fabric API features&lt;/h3&gt;
&lt;p&gt;Fabric API added many features since the last update blog post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item API: support stack-aware recipe remainders. (AlphaMode)&lt;/li&gt;
  &lt;li&gt;Content Registries: register villager interactions, sculk sensor frequencies, and path node types (aws404, Shnupbups, devpelux)&lt;/li&gt;
  &lt;li&gt;Client Tags: allow client-side mods to rely on tags not present on the server. (dexman545)&lt;/li&gt;
  &lt;li&gt;Entity Events: add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AFTER_DEATH&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AFTER_DAMAGE&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALLOW_DEATH&lt;/code&gt; events. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Resource Conditions: support all tags. (apple502j)&lt;/li&gt;
  &lt;li&gt;Sound API: play custom sounds. (SquidDev)&lt;/li&gt;
  &lt;li&gt;Resource Loader: support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; as pack display name. (apple502j)&lt;/li&gt;
  &lt;li&gt;Block Appearance API: groundwork for cross-mod connected textures. (Technici4n)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricLanguageProvider&lt;/code&gt;: easily generate language JSON files with data generation. (mineblock11)&lt;/li&gt;
  &lt;li&gt;Overwriting Screen Handler Factory: open new screen handlers without re-centering the mouse pointer. (apple502j)&lt;/li&gt;
  &lt;li&gt;Transfer API: add several helper APIs for fluid interactions and storage. (Technici4n)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;minecraft-changes&quot;&gt;Minecraft changes&lt;/h2&gt;

&lt;h3 id=&quot;registries&quot;&gt;Registries&lt;/h3&gt;

&lt;p&gt;There are several changes to registries.&lt;/p&gt;

&lt;p&gt;The most impactful change is that &lt;strong&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt; class is now split into 3 different classes&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKeys&lt;/code&gt; holds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryKey&lt;/code&gt; instances used for registries, previously held in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static final&lt;/code&gt; fields.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registries&lt;/code&gt; holds all static registry instances.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt; is now an interface and holds everything else.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together with this change, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEY&lt;/code&gt; suffixes for registry key fields have been removed.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- Registry.register(Registry.BLOCK_KEY, new Identifier(&quot;test&quot;, &quot;dirt&quot;), DIRT_BLOCK);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ Registry.register(Registries.BLOCK, new Identifier(&quot;test&quot;, &quot;dirt&quot;), DIRT_BLOCK);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In many parts of the code, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt;  is now replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntryLookup&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registerable&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntryLookup&lt;/code&gt; is a read-only view of a registry, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registerable&lt;/code&gt; is a write-only view. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BuiltinRegistries&lt;/code&gt; class no longer holds the built-in registry; it instead holds the builder to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntryLookup.RegistryLookup&lt;/code&gt; (a lookup of registry lookups, similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryManager&lt;/code&gt;). See below for migrating old worldgen code.&lt;/p&gt;

&lt;p&gt;Since virtually all registry-related code needs a rewrite, Yarn used this opportunity to &lt;strong&gt;repackage the registry and tag packages&lt;/strong&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.minecraft.registry&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.minecraft.registry.tag&lt;/code&gt; respectively. Note, if you are using Mojang Mappings or other third-party mappings, this does not affect you. A simple find-and-replace should be enough:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- import net.minecraft.tag.TagKey;
- import net.minecraft.util.registry.Registry;
- import net.minecraft.util.registry.RegistryEntry;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ import net.minecraft.registry.tag.TagKey;
+ import net.minecraft.registry.Registry;
+ import net.minecraft.registry.entry.RegistryEntry;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fabric API’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistrySetupCallback&lt;/code&gt; was changed to take a new context object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryView&lt;/code&gt; instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRegistryManager&lt;/code&gt;. This API allows easy registration of events, while preventing crashes caused by the misuse of previous API.&lt;/p&gt;

&lt;h3 id=&quot;item-groups&quot;&gt;Item Groups&lt;/h3&gt;
&lt;p&gt;One of the major changes in this version involve the Creative inventory screen. Items can now appear in multiple tabs and the display order no longer relies on the item registration order. Item groups got a significant refactor during this process.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-item-groups-v0&lt;/code&gt; module is replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric-item-group-api-v1&lt;/code&gt;. This is now required for adding items to vanilla item groups; you can no longer specify the item group using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item.Settings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To add an item to a vanilla or other existing item group, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroupEvents&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1.19.2&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MY_ITEM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MISC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 1.19.3&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ItemGroupEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modifyEntriesEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ItemGroups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INGREDIENTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MY_ITEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Instead of ItemGroup, you can also specify an Identifier for modded item groups.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To create a new item group, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricItemGroup.builder()&lt;/code&gt;. This allows adding items directly, without using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemGroupEvents&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ItemGroup&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ITEM_GROUP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FabricItemGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test_group&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Example Item Group&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DIAMOND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabledFeatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operatorEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DIAMOND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The changes also made it possible to add items at a specific position in the Creative inventory. Check the &lt;a href=&quot;https://maven.fabricmc.net/docs/fabric-api-0.68.1+1.19.3/net/fabricmc/fabric/api/itemgroup/v1/FabricItemGroupEntries.html&quot;&gt;FabricItemGroupEntries javadoc&lt;/a&gt; for details.&lt;/p&gt;

&lt;!-- TODO update link after the FAPI release --&gt;

&lt;h3 id=&quot;data-generation&quot;&gt;Data generation&lt;/h3&gt;
&lt;p&gt;A number of breaking changes have been made to the Data Generation API.&lt;/p&gt;

&lt;p&gt;Data generators now have to create a “pack” and add providers to the pack. (It’s like a resource pack - the provider generates a resource for a specific pack.) This can be done with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricDataGenerator#createPack&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createBuiltinResourcePack&lt;/code&gt; for packs loadable by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResouceManagerHelper#registerBuiltinResourcePack&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;FabricDataGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;YourProvider:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Data generator constructors now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricDataOutput&lt;/code&gt; as an argument instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataGenerator&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateStuff&lt;/code&gt; methods (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateBlockLootTables&lt;/code&gt;) are now provided from the vanilla game and renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generate&lt;/code&gt;. They are also now public, not protected.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestBlockLootTableProvider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FabricBlockLootTableProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestBlockLootTableProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FabricDataGenerator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Renamed from generateBlockLootTables and now public&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addDrop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SIMPLE_BLOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For tag generators, the constructor must also take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompletableFuture&amp;lt;RegistryWrapper.WrapperLookup&amp;gt;&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricTagProvider.DynamicRegistryTagProvider&lt;/code&gt; is now replaced with just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricTagProvider&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configure&lt;/code&gt; method is used to add tags.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestBiomeTagProvider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FabricTagProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Biome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestBiomeTagProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FabricDataOutput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WrapperLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registriesFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistryKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registriesFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WrapperLookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getOrCreateTagBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TagKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MOD_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BiomeKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BADLANDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;custom-world-generation&quot;&gt;Custom world generation&lt;/h3&gt;
&lt;p&gt;In the registry section we briefly mentioned that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BuiltinRegistries&lt;/code&gt; no longer holds the actual registries; more specifically, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BuiltinRegistries&lt;/code&gt; is no longer used during actual world generation. If your biome mod, structure mod, 1.19 message type mod etc. registers stuff into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BuiltinRegistries&lt;/code&gt;, you now need to generate its JSON and include it in the mod as a data pack.&lt;/p&gt;

&lt;p&gt;You can override the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataGeneratorEntrypoint.buildRegistry(RegistryBuilder registryBuilder)&lt;/code&gt; in your data gen entrypoint to add your modded entries the registry used for datageneration. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildRegistry&lt;/code&gt; is invoked asynchronously and the resulting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryWrapper.WrapperLookup&lt;/code&gt; can be passed to your data providers using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataGeneratorEntrypoint&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fabricmc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fabric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;datagen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DataGeneratorEntrypoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// onInitializeDataGenerator goes here&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registryBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;registryBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ExampleBiomes:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Minecraft's BuiltinBiomes class is another good example.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleBiomes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistryKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Biome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MODDED_BIOME_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistryKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;biome_name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Registerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Biome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biomeRegisterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;biomeRegisterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MODDED_BIOME_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createBiome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A new data generator, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FabricDynamicRegistryGenerator&lt;/code&gt;, allows generating the JSON files from the previously-registered objects.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorldgenProvider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FabricDynamicRegistryProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WorldgenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FabricDataOutput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WrapperLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registriesFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registriesFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WrapperLookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistryWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Biome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biomeRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWrapperOrThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistryKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExampleBiomes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MODDED_BIOME_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biomeRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExampleBiomes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MODDED_BIOME_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;textures&quot;&gt;Textures&lt;/h3&gt;
&lt;p&gt;The performance optimizations in 1.19.3 include texture loading changes. By default, textures used in a certain atlas (such as block texture atlas) must now be in the folder for the type of the atlas (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textures/block&lt;/code&gt;). This affects some resource packs, which might be bundled in a mod.&lt;/p&gt;

&lt;p&gt;To use custom textures located elsewhere, an atlas configuration file should be added to the resource pack. See the &lt;a href=&quot;https://www.minecraft.net/en-us/article/minecraft-snapshot-22w46a&quot;&gt;22w46a update blogpost&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Fabric Textures API is removed entirely; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientSpriteRegistryCallback&lt;/code&gt; is replaced with atlas configuration files, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DependentSprite&lt;/code&gt; was practically unused.&lt;/p&gt;

&lt;h3 id=&quot;resource-loading&quot;&gt;Resource loading&lt;/h3&gt;
&lt;p&gt;There are many refactors to resource loading, such as using a custom filesystem to improve performance. However they should not affect most mods.&lt;/p&gt;

&lt;p&gt;One change made in the refactor is that resource packs now allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; to be used as the display name. With this change,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceManagerHelper#registerBuiltinResourcePack&lt;/code&gt; method can now take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;. The old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; based method is now deprecated; use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text#literal&lt;/code&gt; for a hard-coded name.&lt;/p&gt;

&lt;p&gt;Mods that support additional resource types should now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceFinder&lt;/code&gt;. This, when given a resource manager, returns the map of IDs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource&lt;/code&gt;s.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceFinder&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON_FINDER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiny_potatoes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceFinder&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PNG_FINDER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiny_potatoes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.png&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// to use:&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;JSON_FINDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;command-changes&quot;&gt;Command changes&lt;/h3&gt;
&lt;p&gt;Several command argument types are removed and consolidated. They include: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnchantmentArgumentType&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntitySummonArgumentType&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatusEffectArgumentType&lt;/code&gt;. There are 2 new argument types that replace those.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntryArgumentType&lt;/code&gt;, which is an argument type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntry&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntryPredicateArgumentType&lt;/code&gt;, which works like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryPredicateArgumentType&lt;/code&gt; but the entry is either named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntryList&lt;/code&gt; (tags) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntry&lt;/code&gt; (one entry)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;move-to-joml&quot;&gt;Move to JOML&lt;/h3&gt;
&lt;p&gt;Mojang has started using the JOML library for rendering-related math. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec3f&lt;/code&gt; is now replaced with JOML &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector3f&lt;/code&gt;. Many of the functions have slightly different names. For example:&lt;/p&gt;
&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- import net.minecraft.util.math.Vec3f;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ import org.joml.Vector3f;
&lt;/span&gt;
- Vector3f vec;
&lt;span class=&quot;gd&quot;&gt;- float x = vec.getX();
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ Vec3f vec;
+ float x = vec.x();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec3d&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec3i&lt;/code&gt; are unaffected.&lt;/p&gt;

&lt;h3 id=&quot;sounds&quot;&gt;Sounds&lt;/h3&gt;
&lt;p&gt;During the pre-release phase of 1.19.3, there were changes to how sounds are referenced and played.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introduction: there are two ways a sound is referred to - “sound asset” defined by the client and identified by sound ID, and “sound event” used by the server and registered in a registry.&lt;/li&gt;
  &lt;li&gt;Previously, to play a registered sound event, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaySoundS2CPacket&lt;/code&gt; was used, and to play a custom (resource pack-defined) sound, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaySoundIdS2CPacket&lt;/code&gt; was used.&lt;/li&gt;
  &lt;li&gt;References to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SoundEvent&lt;/code&gt; are mostly replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&amp;lt;SoundEvent&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SoundEvent&lt;/code&gt; should now be constructed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SoundEvent.of&lt;/code&gt;, which is transitively access-widened by Fabric API.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaySoundIdS2CPacket&lt;/code&gt; was removed. To play a custom sound, use direct registry entry (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntry.of(SoundEvent)&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Biome Modification API received a breaking change to accept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryEntry&amp;lt;SoundEvent&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SoundEvent&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-changes&quot;&gt;Other changes&lt;/h3&gt;
&lt;p&gt;Here are other miscellaneous changes in 1.19.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Feature flags were introduced. Currently, blocks, items, and entity types can be hidden behind a flag. “Experimental” features that aren’t enabled by a feature flag are still registered in a registry, but are ignored in most methods. Resource Condition API can now check feature flags.&lt;/li&gt;
  &lt;li&gt;For those who use the vanilla system for GUIs (instead of third-party APIs): a new grid-based GUI system is added. This can be used in place of the old way of positioning widgets, and reduces the need for hard-coded display positions.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ButtonWidget&lt;/code&gt; is now constructed using a builder.&lt;/li&gt;
  &lt;li&gt;Tooltips got a refactor to support item group related changes. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screen#setTooltip&lt;/code&gt; methods are added; there are three overloads. They all have to be called at every render call. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTooltip&lt;/code&gt; method is also available for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClickableWidget&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ButtonWidget.Builder&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Networking changes: chat preview was removed, and the game no longer requires a header packet to be sent when blocking messages. The client-side &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendChatMessage&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendCommand&lt;/code&gt; methods have been moved from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientPlayerEntity&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientPlayNetworkHandler&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Mobs using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Brain&lt;/code&gt; for control can now take advantage of functional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; creation. This resembles React Hooks and is replacing the previous subclass-based approach in vanilla. See &lt;a href=&quot;https://maven.fabricmc.net/docs/yarn-1.19.3-rc1+build.2/net/minecraft/entity/ai/brain/task/TaskTriggerer.html&quot;&gt;javadoc&lt;/a&gt; for examples. &lt;!-- TODO replace link --&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack#isItemEqualIgnoreDamage&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemStack#areItemsEqualIgnoreDamage&lt;/code&gt; were removed. Either use standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isItemEqual&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;areItemsEqual&lt;/code&gt; or compare yourself.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JsonHelper#deserialize&lt;/code&gt; no longer permits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deserializeNullable&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;yarn-renames&quot;&gt;Yarn renames&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;If you are using Mojang Mappings or other third-party mappings, you can skip this section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are dozens of renames to fix wrong names and improve code readability. Here are some of the major renames:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createAndScheduleBlockTick&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createAndScheduleFluidTick&lt;/code&gt; is now simply&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scheduleBlockTick&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scheduleFluidTick&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OreBlock&lt;/code&gt; is renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExperienceDroppingBlock&lt;/code&gt; as it is used by a Sculk block.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WallStandingBlockItem&lt;/code&gt; is renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VerticallyAttachableBlockItem&lt;/code&gt; because it can now be used for hanging blocks as well.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractButtonBlock&lt;/code&gt; is renamed to ButtonBlock as it is no longer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScreenHandler#transferSlot&lt;/code&gt; is renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quickMove&lt;/code&gt; to be more descriptive.&lt;/li&gt;
  &lt;li&gt;Shaders and programs were renamed. A program is composed of vertex and fragment shaders; this was previously swapped. See &lt;a href=&quot;https://github.com/FabricMC/yarn/pull/3384&quot;&gt;the pull request&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Minecraft 1.19.3 is almost here, with big changes to game internals. Beginning with this update, Mojang have changed their versioning scheme such that ‘minor’ releases like this one may contain larger changes under the hood. As such, the changes in this version affect almost all mods (not even comparable to the changes in 1.18.2, and significantly bigger than 1.19). Here are the list of all major modder-facing changes in this version.</summary></entry><entry><title type="html">Fabric for Minecraft 1.19</title><link href="https://fabricmc.net/2022/06/07/119.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.19" /><published>2022-06-07T00:00:00+00:00</published><updated>2022-06-07T00:00:00+00:00</updated><id>https://fabricmc.net/2022/06/07/119</id><content type="html" xml:base="https://fabricmc.net/2022/06/07/119.html">&lt;p&gt;Minecraft 1.19: &lt;em&gt;The Wild Update&lt;/em&gt; is now released, and along with it, updates for Fabric itself and many mods already.&lt;/p&gt;

&lt;h2 id=&quot;for-players&quot;&gt;For Players&lt;/h2&gt;

&lt;p&gt;Players should use Fabric Installer 0.11.0 and Fabric Loader 0.14.6 (at the time of writing) to play on Minecraft 1.19.&lt;/p&gt;

&lt;p&gt;Plenty of mods have already updated to 1.19 already, and we expect many more to be on the way. Please be patient as mod developers dedicate some of their free time to updating their mods to this new version.&lt;/p&gt;

&lt;h2 id=&quot;fabric-changes-for-mod-developers&quot;&gt;Fabric Changes For Mod Developers&lt;/h2&gt;

&lt;p&gt;Developers should use Loom 0.12 (at the time of writing) to develop for Minecraft 1.19.&lt;/p&gt;

&lt;p&gt;Minecraft 1.19 introduces several code changes to major developer-facing APIs. In addition, Fabric has introduced several new ways for mod developers to safely develop server-side mods without accidentally relying on client-exclusive code.&lt;/p&gt;

&lt;h3 id=&quot;new-fabric-api-features&quot;&gt;New Fabric API features&lt;/h3&gt;
&lt;p&gt;Fabric API added many features since the last update blog post:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data Generation: easily generate JSON files for blocks, recipes, advancements, etc… (modmuss50)&lt;/li&gt;
  &lt;li&gt;Entity API Lookup: flexible retrieval of object instances from entities. (deirn)&lt;/li&gt;
  &lt;li&gt;Resource Conditions: only enable select recipes, advancements, etc… when specific conditions are met. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Transitive Access Widener module: directly use many private/protected classes and methods in vanilla. (Juuxel)&lt;/li&gt;
  &lt;li&gt;FluidVariant Attributes: define and access name, temperature, etc… of fluids. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Convention Tags: define standard tags that Fabric mods can use, and register vanilla entries to them. (dexman545)&lt;/li&gt;
  &lt;li&gt;Loot API v2: replacement for the Loot Table API v1, with many improvements. The new version uses interface injection and transitive access wideners to implement most of its functionalities. Additionally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootTableLoadingCallback&lt;/code&gt; was replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootTableEvents.REPLACE&lt;/code&gt; event (for replacing an entire loot table) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LootTableEvents.MODIFY&lt;/code&gt; event (for modifying part of a loot table). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REPLACE&lt;/code&gt; runs before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MODIFY&lt;/code&gt;, and if one mod replaces a loot table, the callback loop will exit early and no other mod can replace the loot table. (Juuxel)&lt;/li&gt;
  &lt;li&gt;Message API (experimental): server-side manipulation of messages sent to players. (apple502j)&lt;/li&gt;
  &lt;li&gt;And many smaller features and bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deprecated-fabric-api-modules&quot;&gt;Deprecated Fabric API Modules&lt;/h3&gt;
&lt;p&gt;Fabric API modules that are deprecated (including the aforementioned Loot Table API v1, and the Command API v1) are no longer present in the default Maven artifact. Mods that wish to build against those modules must now depend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.fabricmc.fabric-api:fabric-api-deprecated&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file for them to build successfully:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;modImplementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should not impact players in any way, as the jar that is downloaded from CurseForge and Modrinth still contains all the modules.&lt;/p&gt;

&lt;h3 id=&quot;class-loader-isolation-and-mixins&quot;&gt;Class Loader Isolation and Mixins&lt;/h3&gt;
&lt;p&gt;Fabric Loader 0.14 improves class loader isolation. This allows Mixins to apply to libraries that the game uses, such as Brigadier, DataFixerUpper, or Authlib. Mods using workarounds to allow mixins to apply to such libraries should remove the workaround.&lt;/p&gt;

&lt;h3 id=&quot;split-client-and-common-code&quot;&gt;Split Client And Common Code&lt;/h3&gt;
&lt;p&gt;In Loom 0.12 and Loader 0.14, an experimental option has been added to require all client code to be moved into its own sourceset: resources and common code will be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main&lt;/code&gt;, while client-only code will be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/client&lt;/code&gt;.
This provides a compile-time guarantee against calling client-only Minecraft code on the server. When building, Loom still produces a single jar that works on both the client and the server.&lt;/p&gt;

&lt;p&gt;To enable split source sets, add the following to your mod’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;loom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;splitEnvironmentSourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sourceSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sourceSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As your mod will now be split across two sourcesets, you will need to use the new DSL to define your mod’s sourcesets. This enables Fabric Loader to group your mod’s classpath together.&lt;/p&gt;

&lt;h2 id=&quot;minecraft-changes-for-mod-developers&quot;&gt;Minecraft Changes For Mod Developers&lt;/h2&gt;
&lt;h3 id=&quot;text-changes&quot;&gt;Text Changes&lt;/h3&gt;

&lt;p&gt;Text should now be created using static methods provided by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; interface rather than by using constructors. For example:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- new LiteralText(content);
- new TranslatableText(key, args);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ Text.of(content);
+ Text.translatable(key, args);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Yarn, the old classes are now called text contents (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TranslatableTextContent&lt;/code&gt;) because they have been separated from the text structure (style and siblings). Mod developers will rarely need to interact with these text content classes.&lt;/p&gt;

&lt;h3 id=&quot;command-changes&quot;&gt;Command Changes&lt;/h3&gt;

&lt;p&gt;Command arguments have been refactored to look up registry entries using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommandRegistryAccess&lt;/code&gt; class, a wrapper around the registry manager. The registry access is an optimization for handling missing tag references, but must be passed into arguments during command registration:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- CommandManager.argument(&quot;item&quot;, ItemStackArgumentType.itemStack())
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ CommandManager.argument(&quot;item&quot;, ItemStackArgumentType.itemStack(registryAccess))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you use Fabric API to register commands, you should switch to the version 2 of the Fabric Command API, which contains a major breaking change to provide the registry access. Unlike most of other breaking changes, this is an entirely new API with a new package.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- import net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ import net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback;
&lt;/span&gt;
- CommandRegistrationCallback.EVENT.register((dispatcher, dedicated) -&amp;gt; {
&lt;span class=&quot;gd&quot;&gt;-    if (dedicated) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -&amp;gt; {
+    if (environment.dedicated) {
&lt;/span&gt;         dispatcher.register(...);
     }
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While version 1 of the API still exists for server-side registration, client commands functionality is no longer present in that version. If you use client commands, you must use version 2, which now uses an event for registration as well:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- import net.fabricmc.fabric.api.client.command.v1.ClientCommandManager;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ import net.fabricmc.fabric.api.client.command.v2.ClientCommandRegistrationCallback;
&lt;/span&gt;
- ClientCommandManager.DISPATCHER.register(...);
&lt;span class=&quot;gi&quot;&gt;+ ClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -&amp;gt; {
+     dispatcher.register(...);
+ });
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;secure-chat&quot;&gt;Secure Chat&lt;/h3&gt;
&lt;p&gt;Mojang has introduced a feature to cryptographically sign chat messages to detect whether the server modified the sent messages. Players sign all chat messages using a Mojang-provided private key, which the server and the clients verify. If the server modifies the message unexpectedly, the message cannot be verified, and clients can opt in to hide those messages.&lt;/p&gt;

&lt;p&gt;Along with this, there were several protocol changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The client now wraps the message with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chat.type.text&lt;/code&gt; message (or the like) instead of the server. To customize this, a custom message type (called “chat type” by the game) can be registered. (See below for details.)&lt;/li&gt;
  &lt;li&gt;Commands are sent in a separate packet, not as a slash-prefixed chat message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This mostly impacts mods that change the chat message server-side in some ways like translating or coloring. To prevent the messages from being marked as “unverified”, the mod has to use one of the two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client-side message decoration. A server can register a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MessageType&lt;/code&gt; using a data pack (just like custom world generation), which consists of various “decorations” applied to the whole message. &lt;a href=&quot;https://misode.github.io/chat-type/&quot;&gt;Chat Type Generator&lt;/a&gt; is a third-party tool that can generate the JSON file defining custom message types easily. Then, when sending a message, the mod should pass the registry key of the message type to be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RegistryKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MessageType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistryKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MESSAGE_TYPE_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// when sending&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is in orange!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Server-side message decorator. This can be used to modify the message content itself, as well as the styling applied. Fabric API provides a way to register a custom message decorator.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ServerMessageDecoratorEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EVENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Used to provide better compatibility across mods&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ServerMessageDecoratorEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONTENT_PHASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tater&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; :tiny_potato:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;completedFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that to sign the message produced by the message decorator, the server must enable “chat preview” by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;previews-chat=true&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.properties&lt;/code&gt;. When clients join such servers, they will receive a warning that the typed message will be sent to show the preview before sending. Clients can disable the chat previews via the options, which causes the decorated part of the message to be marked as “unsigned” (but not the original message).&lt;/p&gt;

&lt;p&gt;Finally, it is recommended to check the Yarn javadoc, which provides documentation on how chat messages are handled.&lt;/p&gt;

&lt;h3 id=&quot;random-changes&quot;&gt;Random Changes&lt;/h3&gt;

&lt;p&gt;The JDK &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.Random&lt;/code&gt; class has been replaced entirely with Mojang’s own interface, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.minecraft.util.math.random.Random&lt;/code&gt;. Several implementations are available to provide different levels of thread safety. For most use cases, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random.create()&lt;/code&gt; should be used to create the random instance. Note that this random instance is not safe for multithreaded use. &lt;!-- Random.createThreadSafe is deprecated, maybe modders shouldn't use random across thread --&gt;&lt;/p&gt;

&lt;h3 id=&quot;option-changes&quot;&gt;Option Changes&lt;/h3&gt;

&lt;p&gt;Client options were completely refactored. There is a class, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SimpleOption&lt;/code&gt;, that handles everything an option needs - rendering, validation, serialization, etc. An instance holds its name, current value, default value, and a set of callbacks to provide customizable behaviors. For example, a slider-based integer option would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ValidatingIntSliderCallbacks&lt;/code&gt;, while a button-based option would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PotentialValuesBasedCallbacks&lt;/code&gt;. To get the value, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getValue()&lt;/code&gt;, and to set the value while validating, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setValue()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameOptions&lt;/code&gt; class holds all options used by the vanilla game.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;GameOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MinecraftClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;GraphicsMode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphicsMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGraphicsMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// setValue triggers validation, so this cannot set gamma more than the limit (1.0)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGamma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tag-changes&quot;&gt;Tag Changes&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag&lt;/code&gt; class has been removed, after having been made largely obsolete in 1.18.2 due to the addition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TagKey&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The inner classes, which are still in use, have been moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TagBuilder&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TagEntry&lt;/code&gt;. The remaining usages in functions now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TagFile&lt;/code&gt; has been added, which is used to refer to a specific tag JSON file.&lt;/p&gt;

&lt;p&gt;Additionally, many vanilla tags have been added or modified in 1.19. Ensure your modded content is in all the applicable tags. For example, villager workstations should now be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minecraft:acquirable_job_site&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3 id=&quot;structure-changes&quot;&gt;Structure Changes&lt;/h3&gt;

&lt;p&gt;The game no longer refers to generated structures as “configured structure features”. Yarn mapping has renamed and several structure-related classes to handle this change; for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StructureFeature&lt;/code&gt; has been renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Structure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To avoid conflicts and to match the terminology used by custom world generation, the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Structure&lt;/code&gt; class was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StructureTemplate&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StructureManager&lt;/code&gt; is now called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StructureTemplateManager&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;seeded-sounds&quot;&gt;Seeded Sounds&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playSound&lt;/code&gt; methods now have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seed&lt;/code&gt; parameter. This seed is used to determine which sound is played for a sound event; as a result of this change, two players hearing the same sound event will now hear the same sound. Most mods will not need to change their code to support seeded sounds, as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playSound&lt;/code&gt; methods are overloaded to provide a default random seed.&lt;/p&gt;</content><author><name></name></author><summary type="html">Minecraft 1.19: The Wild Update is now released, and along with it, updates for Fabric itself and many mods already.</summary></entry><entry><title type="html">Fabric for Minecraft 1.18</title><link href="https://fabricmc.net/2021/11/30/118.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.18" /><published>2021-11-30T00:00:00+00:00</published><updated>2021-11-30T00:00:00+00:00</updated><id>https://fabricmc.net/2021/11/30/118</id><content type="html" xml:base="https://fabricmc.net/2021/11/30/118.html">&lt;p&gt;&lt;img src=&quot;/assets/cliffs.png&quot; alt=&quot;Cliffs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Minecraft 1.18: &lt;em&gt;Caves &amp;amp; Cliffs, Part 2&lt;/em&gt; is now released, and along with it, updates for Fabric itself and many mods already.&lt;/p&gt;

&lt;p&gt;The release of Fabric for Minecraft 1.17 was almost 6 months ago. Since then, we have updated to all 7 experimental snapshots, 8 snapshots, 8 pre-releases, 4 release candidates, and the final release version of Minecraft 1.18.&lt;/p&gt;

&lt;p&gt;This blog post will go over what the 1.18 update means for both players and developers.&lt;/p&gt;

&lt;h2 id=&quot;for-players&quot;&gt;For Players&lt;/h2&gt;

&lt;p&gt;Players should use Fabric Installer 0.9.0 and Fabric Loader 0.12.5 (at the time of writing) to play on Minecraft 1.18.&lt;/p&gt;

&lt;p&gt;Hundreds of mods have already been updated to support 1.18 and we expect there will be many new and updated mods being released soon. We kindly ask that you be patient as mod developers update their mods.&lt;/p&gt;

&lt;h3 id=&quot;all-of-fabric-5-modpack&quot;&gt;All of Fabric 5 Modpack&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/aof5.png&quot; alt=&quot;AOF 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The fifth edition of the All of Fabric modpack will be available on CurseForge very soon.&lt;/p&gt;

&lt;p&gt;AOF5 includes a wide selection of 1.18 Fabric mods. It will continue to receive updates as mods get ported, and new mods get created.&lt;/p&gt;

&lt;h2 id=&quot;for-mod-developers&quot;&gt;For Mod Developers&lt;/h2&gt;

&lt;p&gt;Various technical changes have been made in both Minecraft and Fabric that will affect mod development for 1.18.&lt;/p&gt;

&lt;p&gt;As always, you can use &lt;a href=&quot;https://fabricmc.net/versions.html&quot;&gt;the versions page&lt;/a&gt; to determine the recommended versions of Yarn, Fabric Loader, Fabric API, and Loom for any version of Minecraft.&lt;/p&gt;

&lt;h3 id=&quot;java-17&quot;&gt;Java 17&lt;/h3&gt;

&lt;p&gt;Once again, Minecraft has updated its Java version, this time to Java 17. This means mods can be compiled for Java 17 and use the latest features.&lt;/p&gt;

&lt;p&gt;While not as large a step up as the previous move to Java 16 made in 1.17, Java 17 still provides some new features that can be used, such as Sealed Classes.&lt;/p&gt;

&lt;p&gt;To set up a development environment you will need to use Java 17, Loom 0.10, and Gradle 7.3 or higher. If you need some help getting set up, please go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#mod-dev-gradle-ides&lt;/code&gt; on the &lt;a href=&quot;https://discord.gg/v6v4pMv&quot;&gt;official Discord server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/FabricMC/fabric-example-mod/commit/57e84b576d24f1b80e1701d4759773234b1ee8ba&quot;&gt;this commit&lt;/a&gt; for an example of how the example mod was updated to accomodate this change.&lt;/p&gt;

&lt;h3 id=&quot;fabric-api&quot;&gt;Fabric API&lt;/h3&gt;

&lt;p&gt;Fabric API has been fully updated to Java 17 and 1.18.&lt;/p&gt;

&lt;p&gt;Since 1.17 released, we have added a number of new APIs that can be used:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fluid and Item Transfer API. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Tag Factory API, allows making tags for any registry (deirn)&lt;/li&gt;
  &lt;li&gt;Add sleeping events. (Juuxel)&lt;/li&gt;
  &lt;li&gt;Add flattening, stripping and tilling registries. (Juuxel)&lt;/li&gt;
  &lt;li&gt;Add a Game Test API to allow the use of Mojang’s testing framework. (modmuss50)&lt;/li&gt;
  &lt;li&gt;Add tag-based mining level API, fix and deprecate FabricBlockSetting.breakByTool. (Juuxel)&lt;/li&gt;
  &lt;li&gt;Add event phases to allow ordering between listeners. (Technici4n)&lt;/li&gt;
  &lt;li&gt;Add DimensionRenderingRegistry to register custom renderers for the sky or weather. (Waterpicker)&lt;/li&gt;
  &lt;li&gt;Add custom fluid renderers and enhanced vanilla fluid renderer customisation. (FoxShadew)&lt;/li&gt;
  &lt;li&gt;Add elytra flight API (Technici4n)&lt;/li&gt;
  &lt;li&gt;Add Oxidizable and Waxable Blocks registries (Shnupbups)&lt;/li&gt;
  &lt;li&gt;a variety of smaller or more focused additions and enhancements (&lt;a href=&quot;https://github.com/FabricMC/fabric/commits/1.18&quot;&gt;see GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these new features have also been added to the 1.17 version of Fabric API.&lt;/p&gt;

&lt;h3 id=&quot;world-generation&quot;&gt;World Generation&lt;/h3&gt;

&lt;p&gt;Minecraft 1.18 overhauls many systems used in world generation. Any mods that include world generation will, as a result, need to adjust to these changes.&lt;/p&gt;

&lt;p&gt;If you need some help with these changes, please go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#mod-dev-worldgen&lt;/code&gt; on the &lt;a href=&quot;https://discord.gg/v6v4pMv&quot;&gt;official Discord server&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;yarn&quot;&gt;Yarn&lt;/h3&gt;

&lt;p&gt;Since 1.17.1, there have been almost 200 commits to Yarn from many contributors, all working to improve coverage and quality.&lt;/p&gt;

&lt;p&gt;Trying to document the Minecraft codebase is a massive job, especially as it is constantly evolving. Improving the documentation provided by Yarn is an ongoing effort by all of the contributors.&lt;/p&gt;

&lt;p&gt;You can view the online Javadoc for 1.18 Release Candidate 4 &lt;a href=&quot;https://maven.fabricmc.net/docs/yarn-1.18-rc4+build.1/&quot;&gt;here&lt;/a&gt; or inline with the decompiled and named Minecraft sources directly attached in your IDE.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Fabric Loader 0.12</title><link href="https://fabricmc.net/2021/10/03/loader-0120.html" rel="alternate" type="text/html" title="Fabric Loader 0.12" /><published>2021-10-03T00:00:00+00:00</published><updated>2021-10-03T00:00:00+00:00</updated><id>https://fabricmc.net/2021/10/03/loader-0120</id><content type="html" xml:base="https://fabricmc.net/2021/10/03/loader-0120.html">&lt;p&gt;This release is a major overhaul of the core features in Fabric Loader, including everything that deals with finding and choosing mods. Users should benefit from greatly improved error messages and quite a few options to customize their install. Mods have several new tools to achieve their goals more easily.&lt;/p&gt;

&lt;p&gt;Fabric Loader 0.12 is not yet available through the normal means, see below for how to get it.&lt;/p&gt;

&lt;h4 id=&quot;changelog&quot;&gt;Changelog&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;added support for the bundler based server distribution introduced by the MC snapshot 21w39a (Player)&lt;/li&gt;
  &lt;li&gt;added support for global access wideners (shartte)&lt;/li&gt;
  &lt;li&gt;added ObjectShare mechanism for mods to interact indirectly (Player)&lt;/li&gt;
  &lt;li&gt;changed package structure for clear api/implementation split, may break some mods that use internals beyond what is now provided by legacy support API (Player)&lt;/li&gt;
  &lt;li&gt;changed project structure to isolate MC specific code, runtime test dependencies and legacy API (modmuss50)&lt;/li&gt;
  &lt;li&gt;fixed mod dependency inspection API and made it more useful (Player)&lt;/li&gt;
  &lt;li&gt;updated Mixin (modmuss50, Player)&lt;/li&gt;
  &lt;li&gt;added Mixin backwards compatibility mechanism, Mixin behavior will depend on the minimum fabricloader version requested by the mod’s dependency definition (Player)&lt;/li&gt;
  &lt;li&gt;changed mod discovery for better reliability, speed and memory efficiency (Player)&lt;/li&gt;
  &lt;li&gt;added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.addMods&lt;/code&gt; system property and argument to configure additional mod sources: individual jar files, directories containing jars, directories representing an extracted mod or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;-prefixed files listing the previous one line at a time (Player)&lt;/li&gt;
  &lt;li&gt;changed mod resolution to gracefully handle multiple instances of the same mod, produce better errors, give mod dependency issue guidance, handle nested jars properly and allow for more customization (Player)&lt;/li&gt;
  &lt;li&gt;changed mod load order to be random in-dev (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.debug.disableModShuffle&lt;/code&gt; system property) and explicitly sorted by mod id in production (not a specification, may change without notice) (Player)&lt;/li&gt;
  &lt;li&gt;added system property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.debug.loadLate&lt;/code&gt; to work around mod load order bugs (Player)&lt;/li&gt;
  &lt;li&gt;added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.debug.throwDirectly&lt;/code&gt; system property to let errorneous entrypoints fail immediately, helps debugging them through isolation (Player)&lt;/li&gt;
  &lt;li&gt;changed exposing the game and its libraries to be as late as possible to prevent accidental too-early accesses (Player)&lt;/li&gt;
  &lt;li&gt;dropped most library dependencies to avoid conflicts with the game (modmuss50, Player)&lt;/li&gt;
  &lt;li&gt;added exception display to the error screen and made it show for crashes too early for MC to normally display by itself (Chocohead)&lt;/li&gt;
  &lt;li&gt;added error screen support for MacOS (Player)&lt;/li&gt;
  &lt;li&gt;fixed various MacOS error screen issues including the dock icon, title, dark mode, stuck on close (modmuss50)&lt;/li&gt;
  &lt;li&gt;fixed normalization of special MC versions like combat test, april fools or experimental releases (Chocohead)&lt;/li&gt;
  &lt;li&gt;various smaller changes and fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-test&quot;&gt;How to test&lt;/h2&gt;

&lt;p&gt;Due to the size of the changes we are releasing this version in stages, once we are happy everything is working we will release it to everyone. If you do find an issue please make sure to report it on our &lt;a href=&quot;https://github.com/FabricMC/fabric-loader/issues&quot;&gt;Github Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially the installer won’t offer Loader 0.12 by itself, it has to be installed as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://fabricmc.net/use/&quot;&gt;https://fabricmc.net/use/&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Click “Show other versions” and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.8.0&lt;/code&gt;, download the installer&lt;/li&gt;
  &lt;li&gt;Download Fabric Loader 0.12.0 from here: &lt;a href=&quot;https://maven.fabricmc.net/net/fabricmc/fabric-loader/0.12.0/fabric-loader-0.12.0.jar&quot;&gt;fabric-loader-0.12.0.jar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Run the installer and go to the Client or Server tab as desired&lt;/li&gt;
  &lt;li&gt;Select the desired Minecraft version as usual&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(select custom)&lt;/code&gt; at the very bottom of the Loader Version list&lt;/li&gt;
  &lt;li&gt;Configure anything else as desired and start the install as usual by using the Install button&lt;/li&gt;
  &lt;li&gt;The installer will now ask for the Fabric Loader JAR, provide it with the one downloaded in step 3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A Fabric Installer version older than 0.8.0 will not support this procedure.&lt;/p&gt;

&lt;h4 id=&quot;mod-developers&quot;&gt;Mod Developers&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure you are using Loom 0.7 or higher. Loom 0.10 is required to use transitive access wideners and develop on 1.18 snapshots.&lt;/li&gt;
  &lt;li&gt;Change your loader version in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.12.0&lt;/code&gt; and reload your gradle project.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mod-resolution-changes&quot;&gt;Mod resolution changes&lt;/h2&gt;

&lt;p&gt;Fabric Loader 0.12.0 will no longer refuse multiple versions of the same mod, some but not all of these may even have unmet dependencies. It will select the latest compatible version if more than one option is present.&lt;/p&gt;

&lt;p&gt;If mod resolution fails due to unmet dependencies Loader will now try to compute a possible solution in addition to only stating what the issue was. It also tries to come up with a much better error message than before, unhelpful “empty clause” errors should be gone.&lt;/p&gt;

&lt;h2 id=&quot;fabricdebugloadlate&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.debug.loadLate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Sometimes mods make false assumptions about the load order of mods, which limits their compatibility unintentionally. Mod load order is not specified and depends on implementation details that may change with a Fabric Loader release. Version 0.12 is one of these and it is impractical to emulate the old behavior.&lt;/p&gt;

&lt;p&gt;We have added a workaround for load order bugs in the form of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.debug.loadLate&lt;/code&gt; system property, which will delay the specified mods to load later than all other mods. For example, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someMod&lt;/code&gt; required a block from another mod that’s being created in the same startup phase, adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Dfabric.debug.loadLate=someMod&lt;/code&gt; moves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someMod&lt;/code&gt; behind all other mods, including the one supplying the block it needs.&lt;/p&gt;

&lt;h2 id=&quot;fabricaddmods&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.addMods&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Fabric Loader normally loads mods from the mods directory, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.addMods&lt;/code&gt; system property or game argument allows specifying more. It takes a list of paths separated by the operation system specific path separator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; on Windows, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; elsewhere).&lt;/p&gt;

&lt;p&gt;Supported options for the paths are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;mod jar location&lt;/li&gt;
  &lt;li&gt;directory location containing mod jars (searched recursively)&lt;/li&gt;
  &lt;li&gt;directory location containing an unpacked mod (for development purposes, detected by the presence of fabric.mod.json)&lt;/li&gt;
  &lt;li&gt;mod list file location prefixed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Dfabric.addMods=@/path/to/extraMods.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A mod list file contains any of the above supported paths except another mod list file, one per line.&lt;/p&gt;

&lt;p&gt;Paths can be absolute or relative to the working directory.&lt;/p&gt;

&lt;h2 id=&quot;mixin-compatibility&quot;&gt;Mixin compatibility&lt;/h2&gt;

&lt;p&gt;Mixin has been changing its implementation in such a way that mixins that are correct and working on one version may no longer work correctly or at all in a newer version. This was necessary to fix bugs in its local variable detection logic.&lt;/p&gt;

&lt;p&gt;Fabric adds a mechanism to emulate the Mixin behavior bundled with the least Loader version a mod depends upon. If the mod requires an old Loader version (or none at all), its Mixins will be processed in line with the old Mixin behavior. If it however depends on Loader 0.12.0, which comes with Fabric Mixin 0.10.2+mixin.0.8.4, it’ll use the native behavior that comes with that release and currently represents the latest&amp;amp;greatest.&lt;/p&gt;

&lt;p&gt;Mods are highly encouraged to declare the minimum Fabric Loader dependency to reflect the minimum version they were tested against. If they need the latest Mixin behavior and fixes, they also need to depend on the latest fabricloader version explicitly.&lt;/p&gt;

&lt;p&gt;For Fabric Loader 0.12.0 this can be done as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabric.mod.json&lt;/code&gt; add the following dependency&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-json=&quot;&gt;&quot;depends&quot;: {
   &quot;fabricloader&quot;: &quot;&amp;gt;=0.12.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lack of suitable dependency declaration will always force-enable legacy behavior for the respective mod! This is undesirable for newly developed mods, but keeps older mods working.&lt;/p&gt;

&lt;h2 id=&quot;objectshare&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectShare&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The object share is very similar to a String-indexed Java &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&lt;/code&gt; with arbitrary values. It offers the usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putIfAbsent&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove&lt;/code&gt; operations and additionally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whenAvailable&lt;/code&gt; to listen for additions in cases without clear ordering.&lt;/p&gt;

&lt;p&gt;Its primary purpose is inter-mod communication. One mod can put some data into it, another mod can pull it back out. Active interactions are possible by publishing and using objects with interfaces like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Function&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Consumer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Contrary to any regular API the object share allows mod interaction without even a compile time dependency, removing friction for simple purposes. This case requires commonly available types/interfaces like the ones provided by Java, Minecraft or Fabric API (String, Integer, List, Map, Identifier, NbtCompound, Event, …). Custom types are of course still possible, but don’t carry these benefits.&lt;/p&gt;</content><author><name></name></author><summary type="html">This release is a major overhaul of the core features in Fabric Loader, including everything that deals with finding and choosing mods. Users should benefit from greatly improved error messages and quite a few options to customize their install. Mods have several new tools to achieve their goals more easily.</summary></entry><entry><title type="html">Fabric for Minecraft 1.17</title><link href="https://fabricmc.net/2021/06/08/117.html" rel="alternate" type="text/html" title="Fabric for Minecraft 1.17" /><published>2021-06-08T00:00:00+00:00</published><updated>2021-06-08T00:00:00+00:00</updated><id>https://fabricmc.net/2021/06/08/117</id><content type="html" xml:base="https://fabricmc.net/2021/06/08/117.html">&lt;p&gt;Minecraft 1.17: &lt;em&gt;Caves &amp;amp; Cliffs, Part 1&lt;/em&gt; is now released, and along with it, Fabric itself and many mods already.&lt;/p&gt;

&lt;p&gt;The release of &lt;a href=&quot;https://fabricmc.net/2020/06/23/116.html&quot;&gt;Fabric for Minecraft 1.16&lt;/a&gt; was almost a year ago. Since then, we have updated to all 48 snapshot and release versions of Minecraft. We recently released a &lt;a href=&quot;https://fabricmc.net/2021/05/27/117-for-developers.html&quot;&gt;blog post&lt;/a&gt; covering what the 1.17 update means for mod developers.&lt;/p&gt;

&lt;h2 id=&quot;all-of-fabric-4-modpack&quot;&gt;All Of Fabric 4 Modpack&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/aof4.png&quot; alt=&quot;AOF 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The fourth edition of the All Of Fabric modpack will available on Curseforge very soon.&lt;/p&gt;

&lt;p&gt;AOF4 includes a wide slection of 1.17 Fabric mods. It will continue to receive updates as mods get ported, and new mods get created.&lt;/p&gt;</content><author><name></name></author><summary type="html">Minecraft 1.17: Caves &amp;amp; Cliffs, Part 1 is now released, and along with it, Fabric itself and many mods already.</summary></entry></feed>